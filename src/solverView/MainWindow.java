/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package solverView;

import java.awt.Component;
import java.awt.Container;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.ToolTipManager;
import solverController.Controller;
import solverController.OptimizationStatusMessage;
import solverController.ParametersBean;
import solverController.SmartScroller;

/**
 *
 * @author Frash
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Pointer to the controller task at hand
     */
    private Controller controllerTask = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        redirectSystemStreams();

        // Setup a smart scroller on the output text area
        new SmartScroller(jScrollPaneTextAreaOutput);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroupSolver = new javax.swing.ButtonGroup();
        buttonGroupInstance = new javax.swing.ButtonGroup();
        jFileChooserInstances = new javax.swing.JFileChooser();
        buttonGroupActions = new javax.swing.ButtonGroup();
        jTextField19 = new javax.swing.JTextField();
        jFileChooserOutputFolderPath = new javax.swing.JFileChooser();
        orienteeringPropertiesBean = new solverController.OrienteeringPropertiesBean();
        alnsPropertiesBean = new solverController.ALNSPropertiesBean();
        jFileChooserLoadParameters = new javax.swing.JFileChooser();
        jFileChooserSaveParameters = new javax.swing.JFileChooser();
        jFileChooserSaveOutput = new javax.swing.JFileChooser();
        parametersBean = new solverController.ParametersBean();
        jPanelMain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelControls = new javax.swing.JPanel();
        jPanelSolver = new javax.swing.JPanel();
        jRadioButtonMIPS = new javax.swing.JRadioButton();
        jRadioButtonRelaxed = new javax.swing.JRadioButton();
        jRadioButtonALNS = new javax.swing.JRadioButton();
        jPanelnstances = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListInstances = new javax.swing.JList<>();
        btnAddInstance = new javax.swing.JButton();
        btnRemoveInstance = new javax.swing.JButton();
        btnMoveInstanceUp = new javax.swing.JButton();
        btnMoveInstanceDown = new javax.swing.JButton();
        jPanelParametersEnvelope = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanelParameters = new javax.swing.JPanel();
        jPanelGeneralParameters = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldTimeLimit = new javax.swing.JTextField();
        jTextFieldNumThreads = new javax.swing.JTextField();
        jLabelOutputFolderPath = new javax.swing.JLabel();
        jTextFieldOutputFolderPath = new javax.swing.JTextField();
        jCheckBoxForceHeuristicConstraints = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        jButtonOutputFolderPath = new javax.swing.JButton();
        jPanelALNSParameters = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldSegmentSize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldQDelta = new javax.swing.JTextField();
        jTextFieldQStart = new javax.swing.JTextField();
        jTextFieldLambda = new javax.swing.JTextField();
        jTextFieldAlpha = new javax.swing.JTextField();
        jTextFieldTimeLimitALNS = new javax.swing.JTextField();
        jTextFieldTimeLimitLocalSearch = new javax.swing.JTextField();
        jTextFieldRewardForBestSegmentHeuristics = new javax.swing.JTextField();
        jTextFieldPunishmentForWorstSegmentHeuristics = new javax.swing.JTextField();
        jTextFieldMaxMIPSNodesForFeasibilityCheck = new javax.swing.JTextField();
        jTextFieldMaxIterationsWithoutImprovement = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanelPsi = new javax.swing.JPanel();
        jTextFieldPsi0 = new javax.swing.JTextField();
        jTextFieldPsi1 = new javax.swing.JTextField();
        jTextFieldPsi2 = new javax.swing.JTextField();
        jTextFieldPsi3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMaxSegments = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldMaxSegmentsWithoutImprovement = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jPanelRepairHeuristics = new javax.swing.JPanel();
        jCheckBoxRepairHighCostRemoval = new javax.swing.JCheckBox();
        jCheckBoxRepairRandomRemoval = new javax.swing.JCheckBox();
        jCheckBoxRepairTravelTime = new javax.swing.JCheckBox();
        jCheckBoxRepairVehicleTime = new javax.swing.JCheckBox();
        jCheckBoxRepairWorstRemoval = new javax.swing.JCheckBox();
        jPanelDestroyHeuristics = new javax.swing.JPanel();
        jCheckBoxDestroyGreedyCostInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyGreedyBestInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyGreedyProfitInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyRandomInsertion = new javax.swing.JCheckBox();
        jPanelActions = new javax.swing.JPanel();
        jButtonSaveParameters = new javax.swing.JButton();
        jButtonLoadParameters = new javax.swing.JButton();
        jButtonRun = new javax.swing.JButton();
        jButtonTestBean = new javax.swing.JButton();
        jPanelOutput = new javax.swing.JPanel();
        jButtonStop = new javax.swing.JButton();
        jScrollPaneTextAreaOutput = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jButtonReset = new javax.swing.JButton();
        jPanelStatusBar = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        jFileChooserInstances.setAccessory(btnAddInstance);
        jFileChooserInstances.setDialogTitle("Select instance file(s) to add");
        jFileChooserInstances.setMultiSelectionEnabled(true);
        jFileChooserInstances.setSelectedFiles(null);

        jTextField19.setText("jTextField19");

        jFileChooserOutputFolderPath.setAcceptAllFileFilterUsed(false);
        jFileChooserOutputFolderPath.setDialogTitle("Choose the output directory");
        jFileChooserOutputFolderPath.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooserOutputFolderPath.setToolTipText("Choose the output directory");

        jFileChooserSaveParameters.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooserSaveParameters.setSelectedFile(new java.io.File("C:\\Program Files\\NetBeans 8.2\\myparams.json"));
        jFileChooserSaveParameters.setToolTipText("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ALNS Solver, by Francesco Piazza, v1.0");

        jPanelControls.setBorder(javax.swing.BorderFactory.createTitledBorder("New Run Configuration"));
        jPanelControls.setToolTipText(null);

        jPanelSolver.setBorder(javax.swing.BorderFactory.createTitledBorder("Solver"));
        java.awt.GridBagLayout jPanelSolverLayout = new java.awt.GridBagLayout();
        jPanelSolverLayout.columnWidths = new int[] {0};
        jPanelSolverLayout.rowHeights = new int[] {0, 10, 0, 10, 0};
        jPanelSolver.setLayout(jPanelSolverLayout);

        buttonGroupSolver.add(jRadioButtonMIPS);
        jRadioButtonMIPS.setText("MIPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonMIPS, gridBagConstraints);

        buttonGroupSolver.add(jRadioButtonRelaxed);
        jRadioButtonRelaxed.setText("Relaxed");
        jRadioButtonRelaxed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRelaxedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonRelaxed, gridBagConstraints);

        buttonGroupSolver.add(jRadioButtonALNS);
        jRadioButtonALNS.setSelected(true);
        jRadioButtonALNS.setText("ALNS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonALNS, gridBagConstraints);

        jPanelnstances.setBorder(javax.swing.BorderFactory.createTitledBorder("Instances to run"));

        jListInstances.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jListInstances.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListInstances.setToolTipText(null);
        jScrollPane2.setViewportView(jListInstances);

        btnAddInstance.setText("+");
        btnAddInstance.setToolTipText("Add a new instance");
        buttonGroupInstance.add(btnAddInstance);
        btnAddInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInstanceActionPerformed(evt);
            }
        });

        btnRemoveInstance.setText("-");
        btnRemoveInstance.setToolTipText("Remove the selected instance");
        buttonGroupInstance.add(btnRemoveInstance);
        btnRemoveInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveInstanceActionPerformed(evt);
            }
        });

        btnMoveInstanceUp.setText("^");
        btnMoveInstanceUp.setToolTipText("Move instance up in the priority list");
        buttonGroupInstance.add(btnMoveInstanceUp);
        btnMoveInstanceUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveInstanceUpActionPerformed(evt);
            }
        });

        btnMoveInstanceDown.setText("v");
        btnMoveInstanceDown.setToolTipText("Move instance down in the priority list");
        buttonGroupInstance.add(btnMoveInstanceDown);
        btnMoveInstanceDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveInstanceDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelnstancesLayout = new javax.swing.GroupLayout(jPanelnstances);
        jPanelnstances.setLayout(jPanelnstancesLayout);
        jPanelnstancesLayout.setHorizontalGroup(
            jPanelnstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelnstancesLayout.createSequentialGroup()
                .addContainerGap(159, Short.MAX_VALUE)
                .addGroup(jPanelnstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddInstance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveInstance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMoveInstanceDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMoveInstanceUp))
                .addContainerGap())
            .addGroup(jPanelnstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelnstancesLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelnstancesLayout.setVerticalGroup(
            jPanelnstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelnstancesLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(btnAddInstance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveInstance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveInstanceUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMoveInstanceDown)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelnstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelnstancesLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jPanelParametersEnvelope.setBorder(javax.swing.BorderFactory.createTitledBorder("Solver parameters"));
        jPanelParametersEnvelope.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane3.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPane3.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(600, 500));

        jPanelParameters.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        java.awt.GridBagLayout jPanelParametersLayout = new java.awt.GridBagLayout();
        jPanelParametersLayout.columnWidths = new int[] {0};
        jPanelParametersLayout.rowHeights = new int[] {0, 10, 0};
        jPanelParameters.setLayout(jPanelParametersLayout);

        jPanelGeneralParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("General Parameters"));
        java.awt.GridBagLayout jPanelGeneralParametersLayout = new java.awt.GridBagLayout();
        jPanelGeneralParametersLayout.columnWidths = new int[] {0, 10, 0, 10, 0};
        jPanelGeneralParametersLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelGeneralParameters.setLayout(jPanelGeneralParametersLayout);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Global time limit for MIPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanelGeneralParameters.add(jLabel3, gridBagConstraints);

        jTextFieldTimeLimit.setToolTipText("Sets how long (in seconds) should the MIPS solver run for");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, orienteeringPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${timeLimit}"), jTextFieldTimeLimit, org.jdesktop.beansbinding.BeanProperty.create("text"), "timeLimit");
        bindingGroup.addBinding(binding);

        jTextFieldTimeLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTimeLimitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jTextFieldTimeLimit, gridBagConstraints);

        jTextFieldNumThreads.setToolTipText("<html>\nSelect how many threads should be used by the MIPS solver (also affects ALNS).\n<br/>Set it to 0 to use all the available CPU cores.\n<br/><b>NOTE:</b> if your CPU has hyperthreading, we suggest you to use only half of the available cores.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, orienteeringPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${numThreads}"), jTextFieldNumThreads, org.jdesktop.beansbinding.BeanProperty.create("text"), "numThreads");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jTextFieldNumThreads, gridBagConstraints);

        jLabelOutputFolderPath.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelOutputFolderPath.setText("Output folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jLabelOutputFolderPath, gridBagConstraints);

        jTextFieldOutputFolderPath.setToolTipText("Choose the output directory");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, orienteeringPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${outputFolderPath}"), jTextFieldOutputFolderPath, org.jdesktop.beansbinding.BeanProperty.create("text"), "outputFolderPath");
        bindingGroup.addBinding(binding);

        jTextFieldOutputFolderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutputFolderPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jTextFieldOutputFolderPath, gridBagConstraints);

        jCheckBoxForceHeuristicConstraints.setText("Force heuristic constraints in MIPS");
        jCheckBoxForceHeuristicConstraints.setToolTipText("If checked, heuristic constraints will always be used every time the MIPS solver is run (also affects ALNS)");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, orienteeringPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${forceHeuristicConstraints}"), jCheckBoxForceHeuristicConstraints, org.jdesktop.beansbinding.BeanProperty.create("selected"), "forceHeuristicConstraints");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jCheckBoxForceHeuristicConstraints, gridBagConstraints);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Number of threads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelGeneralParameters.add(jLabel17, gridBagConstraints);

        jButtonOutputFolderPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/openSmall.png"))); // NOI18N
        jButtonOutputFolderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputFolderPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanelGeneralParameters.add(jButtonOutputFolderPath, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelParameters.add(jPanelGeneralParameters, gridBagConstraints);

        jPanelALNSParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("ALNS parameters"));
        java.awt.GridBagLayout jPanelALNSParametersLayout = new java.awt.GridBagLayout();
        jPanelALNSParametersLayout.columnWidths = new int[] {0, 10, 0};
        jPanelALNSParametersLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelALNSParameters.setLayout(jPanelALNSParametersLayout);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Max iterations per segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel5, gridBagConstraints);

        jTextFieldSegmentSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldSegmentSize.setToolTipText("<html> Maximum number of iterations in an ALNS optimization segment.\n<br>Every iteration includes the application of a destroy heuristic over\n<br>the previous feasible solution, followed by the application of a\n<br>repair heuristic to bring the destroyed solution back to feasibility.\n<br>This parameter can be throttled by the \"Maximum iterations without\n<br>improvement in a segment\" parameter.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${segmentSize}"), jTextFieldSegmentSize, org.jdesktop.beansbinding.BeanProperty.create("text"), "segmentSize");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldSegmentSize, gridBagConstraints);
        jTextFieldSegmentSize.getAccessibleContext().setAccessibleDescription("<html>\nMaximum number of iterations in an ALNS optimization segment.\n<br>Every iteration includes the application of a destroy heuristic over\n<br>the previous feasible solution, followed by the application of a\n<br>repair heuristic to bring the destroyed solution back to feasibility.\n<br>This parameter can be throttled by the \"Maximum iterations without\n<br>improvement in a segment\" parameter.");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Delta q");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel6, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Initial q");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel7, gridBagConstraints);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Lambda");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel8, gridBagConstraints);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Alpha");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel9, gridBagConstraints);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("ALNS solver time limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel10, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Local search time limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel11, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Reward for best segment heuristics");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel12, gridBagConstraints);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Punishment for worst segment heuristics");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel13, gridBagConstraints);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Max MIPS nodes to solve in feasibility check");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel14, gridBagConstraints);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Max iterations w/o improvement in a segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel15, gridBagConstraints);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Heuristic scores (values for psi)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel16, gridBagConstraints);

        jTextFieldQDelta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQDelta.setToolTipText("<html>\nConstant increment of q at the end of every segment.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${qDelta}"), jTextFieldQDelta, org.jdesktop.beansbinding.BeanProperty.create("text"), "qDelta");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldQDelta, gridBagConstraints);

        jTextFieldQStart.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQStart.setToolTipText("<html>\nInitial value of q (degree of destruction) at the beginning of the first ALNS segment.\n<br>q determines how many clusters are to be inserted by the destruction heuristics.\n<br>The value of q increases at the end of each segment by <tt>qDelta</tt>.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${qStart}"), jTextFieldQStart, org.jdesktop.beansbinding.BeanProperty.create("text"), "qStart");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldQStart, gridBagConstraints);

        jTextFieldLambda.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldLambda.setToolTipText("<html>\nThis is the decay parameter of the update process for heuristic method weights.\n<br>This value should be a double in the interval [0,1].\n<br>Heuristic method weights are updated at the end of every iteration\n<br>following the convex combination:\n<br> <tt>newWeight</tt> = <tt>lambda</tt>*<tt>oldWeight</tt> + (1-<tt>lambda</tt>)*<tt>psi</tt>\n<br>where <tt>psi</tt> is a value that indicates the relative score to give to an heuristic.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${lambda}"), jTextFieldLambda, org.jdesktop.beansbinding.BeanProperty.create("text"), "lambda");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldLambda, gridBagConstraints);

        jTextFieldAlpha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldAlpha.setToolTipText("<html>\n<b>Simulated annealing</b>\n<br>This is the decay parameter of the update process for <tt>Temperature.</tt>\n<br>This value should be a real number in the interval [0,1].\n<br>The temperature is updated at the end of every segment like\n<br><tt>newTemperature</tt> = <tt>alpha</tt>*<tt>oldTemperature</tt>\n<br>A slowly decreasing temperature (<tt>alpha</tt>-&gt;1)\n<br>will make it more likely to accept worse solutions at the\n<br>beginning of a segment, but it might find a better solution.\n<br>However a slowly decreasing temperature will take longer to converge\n<br>to a better solution.\n<br>\n<br><b>NOTE:</b> to be changed in accordance with <tt>Segment Size</tt>");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${alpha}"), jTextFieldAlpha, org.jdesktop.beansbinding.BeanProperty.create("text"), "alpha");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldAlpha, gridBagConstraints);
        jTextFieldAlpha.getAccessibleContext().setAccessibleDescription("<html>\n<b>Simulated annealing</b>\n<br>This is the decay parameter of the update process for <tt>Temperature.</tt>\n<br>This value should be a double in the interval [0,1].\n<br>The temperature is updated at the end of every segment like\n<br><tt>newTemperature</tt> = <tt>alpha</tt>*<tt>oldTemperature</tt>\n<br>A slowly decreasing temperature (<tt>alpha</tt>-&gt;1)\n<br>will make it more likely to accept worse solutions at the\n<br>beginning, but it might find a better solution in a longer time.\n<br><b>NOTE:</b> to be changed in accordance with <tt>Segment Size</tt>");

        jTextFieldTimeLimitALNS.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTimeLimitALNS.setToolTipText("<html>\nMaximum runtime for the ALNS heuristic algorithm (in seconds).\n<br>When this time is reached, the ALNS solver execution terminates.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${timeLimitALNS}"), jTextFieldTimeLimitALNS, org.jdesktop.beansbinding.BeanProperty.create("text"), "timeLimitALNS");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldTimeLimitALNS, gridBagConstraints);

        jTextFieldTimeLimitLocalSearch.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTimeLimitLocalSearch.setToolTipText("<html>\nMaximum runtime (in seconds) for the local search process.\n<br>A MIPS local search is run at the end of every segment, when possible.\n<br>The local search process takes advantage of all the heuristic constraints\n<br>defined by our Optimization Algorithms team.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${timeLimitLocalSearch}"), jTextFieldTimeLimitLocalSearch, org.jdesktop.beansbinding.BeanProperty.create("text"), "timeLimitLocalSearch");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldTimeLimitLocalSearch, gridBagConstraints);

        jTextFieldRewardForBestSegmentHeuristics.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldRewardForBestSegmentHeuristics.setToolTipText("<html>\nA scaling factor which is applied to the weight of the best heuristics of the previous segment,\n<br>at the beginning of the next segment.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${rewardForBestSegmentHeuristics}"), jTextFieldRewardForBestSegmentHeuristics, org.jdesktop.beansbinding.BeanProperty.create("text"), "rewardForBestSegmentHeuristics");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldRewardForBestSegmentHeuristics, gridBagConstraints);

        jTextFieldPunishmentForWorstSegmentHeuristics.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPunishmentForWorstSegmentHeuristics.setToolTipText("<html>\nA scaling factor which is applied to the weight of the worst heuristics of the previous segment,\n<br>at the beginning of the next segment.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${punishmentForWorstSegmentHeuristics}"), jTextFieldPunishmentForWorstSegmentHeuristics, org.jdesktop.beansbinding.BeanProperty.create("text"), "punishmentForWorstSegmentHeuristics");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldPunishmentForWorstSegmentHeuristics, gridBagConstraints);

        jTextFieldMaxMIPSNodesForFeasibilityCheck.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxMIPSNodesForFeasibilityCheck.setToolTipText("<html>\nDetermines the maximum number of MIPS nodes to solve before\n<br>giving up on a feasibility test on a solution.\n<br>Should be set to a high amount (ideally more than 5000) to avoid\n<br>claiming that a feasible (but hard to prove) solution is infeasible.\n<br><b>Note:</b> hard-to-prove-as-feasible solutions will take advantage\n<br>of this possibility, but will take much longer to prove as feasible.\n<br>A lower amount will cutoff such hard-to-prove solutions (and save time).\n<br><b>When in doubt, leave at the default value.</b>");
        jTextFieldMaxMIPSNodesForFeasibilityCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${maxMIPSNodesForFeasibilityCheck}"), jTextFieldMaxMIPSNodesForFeasibilityCheck, org.jdesktop.beansbinding.BeanProperty.create("text"), "maxMIPSNodesForFeasibilityCheck");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldMaxMIPSNodesForFeasibilityCheck, gridBagConstraints);

        jTextFieldMaxIterationsWithoutImprovement.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxIterationsWithoutImprovement.setToolTipText("<html>\nMaximum number of iterations without improvement in an ALNS optimization segment.\n<br>If this number of iterations without improvement is reached,\n<br>the ALNS solver will move on with the next segment (evenutally doing a little\n<br>local search in between the two segments).");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${maxIterationsWithoutImprovement}"), jTextFieldMaxIterationsWithoutImprovement, org.jdesktop.beansbinding.BeanProperty.create("text"), "maxIterationsWithoutImprovement");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldMaxIterationsWithoutImprovement, gridBagConstraints);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("Active Heuristics:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 38;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelALNSParameters.add(jLabel20, gridBagConstraints);

        jPanelPsi.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                updatePsiGui(evt);
            }
        });
        java.awt.GridBagLayout jPanelPsiLayout = new java.awt.GridBagLayout();
        jPanelPsiLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelPsiLayout.rowHeights = new int[] {0};
        jPanelPsi.setLayout(jPanelPsiLayout);

        jTextFieldPsi0.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi0.setText("0.0");
        jTextFieldPsi0.setToolTipText("<html>\n<tt>w1</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be a new global optimum.");
        jTextFieldPsi0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi0FocusLost(evt);
            }
        });
        jTextFieldPsi0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi0ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelPsi.add(jTextFieldPsi0, gridBagConstraints);

        jTextFieldPsi1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi1.setText("0.0");
        jTextFieldPsi1.setToolTipText("<html>\n<tt>w2</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be better than the previous one.");
        jTextFieldPsi1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi1FocusLost(evt);
            }
        });
        jTextFieldPsi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelPsi.add(jTextFieldPsi1, gridBagConstraints);

        jTextFieldPsi2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi2.setText("0.0");
        jTextFieldPsi2.setToolTipText("<html>\n<tt>w3</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is worse than the previous one but is accepted anyway.");
        jTextFieldPsi2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi2FocusLost(evt);
            }
        });
        jTextFieldPsi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelPsi.add(jTextFieldPsi2, gridBagConstraints);

        jTextFieldPsi3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi3.setText("0.0");
        jTextFieldPsi3.setToolTipText("<html>\n<tt>w4</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be worse than the previous one and is rejected.");
        jTextFieldPsi3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi3FocusLost(evt);
            }
        });
        jTextFieldPsi3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelPsi.add(jTextFieldPsi3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelALNSParameters.add(jPanelPsi, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Max segments for an ALNS run");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel2, gridBagConstraints);

        jTextFieldMaxSegments.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxSegments.setToolTipText("<html>\nMaximum number of segments for an ALNS run.\n<br>When this number of segments is reached, the ALNS solver\n<br>terminates its execution.\n<br>This value is throttled by the \"Max segments without improvement\"\n<br>parameter.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${maxSegments}"), jTextFieldMaxSegments, org.jdesktop.beansbinding.BeanProperty.create("text"), "maxSegments");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldMaxSegments, gridBagConstraints);

        jLabel4.setText("Setup:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelALNSParameters.add(jLabel4, gridBagConstraints);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Termination criteria:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelALNSParameters.add(jLabel18, gridBagConstraints);

        jTextFieldMaxSegmentsWithoutImprovement.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxSegmentsWithoutImprovement.setToolTipText("<html>\nMaximum number of segments without improvement for an ALNS run.\n<br>When this number of segments without improvement is reached,\n<br>the ALNS solver terminates its execution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${maxSegmentsWithoutImprovement}"), jTextFieldMaxSegmentsWithoutImprovement, org.jdesktop.beansbinding.BeanProperty.create("text"), "maxSegmentsWithoutImprovement");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSParameters.add(jTextFieldMaxSegmentsWithoutImprovement, gridBagConstraints);

        jLabel19.setText("Max segments without improvement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSParameters.add(jLabel19, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelALNSParameters.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 36;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelALNSParameters.add(jSeparator2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanelRepairHeuristics.setBorder(javax.swing.BorderFactory.createTitledBorder("Repair Heuristics"));
        jPanelRepairHeuristics.setToolTipText("");
        jPanelRepairHeuristics.setName(""); // NOI18N
        jPanelRepairHeuristics.setLayout(new java.awt.GridBagLayout());

        jCheckBoxRepairHighCostRemoval.setText("RepairHighCostRemoval");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useRepairHighCostRemoval}"), jCheckBoxRepairHighCostRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairHighCostRemoval");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairHighCostRemoval, gridBagConstraints);

        jCheckBoxRepairRandomRemoval.setText("RepairRandomRemoval");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useRepairRandomRemoval}"), jCheckBoxRepairRandomRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairRandomRemoval");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairRandomRemoval, gridBagConstraints);

        jCheckBoxRepairTravelTime.setText("RepairTravelTime");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useRepairTravelTime}"), jCheckBoxRepairTravelTime, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairTravelTime");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairTravelTime, gridBagConstraints);

        jCheckBoxRepairVehicleTime.setText("RepairVehicleTime");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useRepairVehicleTime}"), jCheckBoxRepairVehicleTime, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairVehicleTime");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairVehicleTime, gridBagConstraints);

        jCheckBoxRepairWorstRemoval.setText("RepairWorstRemoval");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useRepairWorstRemoval}"), jCheckBoxRepairWorstRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairWorstRemoval");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairWorstRemoval, gridBagConstraints);

        jPanel1.add(jPanelRepairHeuristics);

        jPanelDestroyHeuristics.setBorder(javax.swing.BorderFactory.createTitledBorder("Destroy Heuristics"));
        jPanelDestroyHeuristics.setToolTipText("");
        jPanelDestroyHeuristics.setLayout(new java.awt.GridBagLayout());

        jCheckBoxDestroyGreedyCostInsertion.setText("DestroyGreedyCostInsertion");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useDestroyGreedyCostInsertion}"), jCheckBoxDestroyGreedyCostInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyCostInsertion");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyCostInsertion, gridBagConstraints);

        jCheckBoxDestroyGreedyBestInsertion.setText("DestroyGreedyBestInsertion");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useDestroyGreedyBestInsertion}"), jCheckBoxDestroyGreedyBestInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyBestInsertion");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyBestInsertion, gridBagConstraints);

        jCheckBoxDestroyGreedyProfitInsertion.setText("DestroyGreedyProfitInsertion");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useDestroyGreedyProfitInsertion}"), jCheckBoxDestroyGreedyProfitInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyProfitInsertion");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyProfitInsertion, gridBagConstraints);

        jCheckBoxDestroyRandomInsertion.setText("DestroyRandomInsertion");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, alnsPropertiesBean, org.jdesktop.beansbinding.ELProperty.create("${useDestroyRandomInsertion}"), jCheckBoxDestroyRandomInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyRandomInsertion");
        bindingGroup.addBinding(binding);

        jCheckBoxDestroyRandomInsertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDestroyRandomInsertionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyRandomInsertion, gridBagConstraints);

        jPanel1.add(jPanelDestroyHeuristics);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 40;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelALNSParameters.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanelParameters.add(jPanelALNSParameters, gridBagConstraints);

        jScrollPane3.setViewportView(jPanelParameters);

        jPanelParametersEnvelope.add(jScrollPane3);

        jPanelActions.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));
        java.awt.GridBagLayout jPanelActionsLayout = new java.awt.GridBagLayout();
        jPanelActionsLayout.columnWidths = new int[] {0};
        jPanelActionsLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelActions.setLayout(jPanelActionsLayout);

        jButtonSaveParameters.setText("Save Parameters");
        buttonGroupActions.add(jButtonSaveParameters);
        jButtonSaveParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveParametersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelActions.add(jButtonSaveParameters, gridBagConstraints);

        jButtonLoadParameters.setText("Load Parameters");
        buttonGroupActions.add(jButtonLoadParameters);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelActions.add(jButtonLoadParameters, gridBagConstraints);

        jButtonRun.setText("Run!");
        buttonGroupActions.add(jButtonRun);
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 107;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelActions.add(jButtonRun, gridBagConstraints);

        jButtonTestBean.setText("Show parameters JSON");
        jButtonTestBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestBeanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelActions.add(jButtonTestBean, gridBagConstraints);

        javax.swing.GroupLayout jPanelControlsLayout = new javax.swing.GroupLayout(jPanelControls);
        jPanelControls.setLayout(jPanelControlsLayout);
        jPanelControlsLayout.setHorizontalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelnstances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelParametersEnvelope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelSolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelControlsLayout.setVerticalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelParametersEnvelope, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanelnstances, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jPanelSolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        java.awt.GridBagLayout jPanelOutputLayout = new java.awt.GridBagLayout();
        jPanelOutputLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelOutputLayout.rowHeights = new int[] {0, 10, 0};
        jPanelOutput.setLayout(jPanelOutputLayout);

        jButtonStop.setText("Stop");
        jButtonStop.setEnabled(false);
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanelOutput.add(jButtonStop, gridBagConstraints);

        jScrollPaneTextAreaOutput.setBackground(new java.awt.Color(0, 51, 102));
        jScrollPaneTextAreaOutput.setAutoscrolls(true);

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setBackground(new java.awt.Color(0, 0, 102));
        jTextAreaOutput.setColumns(15);
        jTextAreaOutput.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaOutput.setForeground(new java.awt.Color(255, 255, 0));
        jTextAreaOutput.setRows(8);
        jTextAreaOutput.setTabSize(4);
        jTextAreaOutput.setToolTipText(null);
        jTextAreaOutput.setAutoscrolls(false);
        jTextAreaOutput.setMargin(new java.awt.Insets(5, 7, 5, 7));
        jTextAreaOutput.setSelectedTextColor(new java.awt.Color(255, 255, 153));
        jTextAreaOutput.setSelectionColor(new java.awt.Color(102, 0, 102));
        jScrollPaneTextAreaOutput.setViewportView(jTextAreaOutput);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1157;
        gridBagConstraints.ipady = 238;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanelOutput.add(jScrollPaneTextAreaOutput, gridBagConstraints);

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelOutput.add(jButtonReset, gridBagConstraints);

        jPanelStatusBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        jPanelStatusBar.setForeground(java.awt.SystemColor.windowText);
        jPanelStatusBar.setLayout(new java.awt.GridLayout(1, 0));

        jLabelStatus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelStatus.setText("Ready.");
        jLabelStatus.setToolTipText(jLabelStatus.getText());
        jPanelStatusBar.add(jLabelStatus);

        jProgressBar1.setToolTipText(null);
        jProgressBar1.setBorder(null);
        jProgressBar1.setStringPainted(true);
        jPanelStatusBar.add(jProgressBar1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanelOutput.add(jPanelStatusBar, gridBagConstraints);

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanelControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanelMain, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveParametersActionPerformed
        // TODO add your handling code here:
        jFileChooserSaveParameters.showOpenDialog(jPanelGeneralParameters);
        File outputFilePath = jFileChooserSaveParameters.getSelectedFile();
        if (outputFilePath != null) {
            updateParametersBean();
            try {
                this.parametersBean.serializeToJSON(outputFilePath.getAbsolutePath());
            } catch (IOException ex) {
                System.out.println("Can't save to '"+outputFilePath.getAbsolutePath()+"': "+ex.getMessage());
            }
            System.out.println("Parameters saved to '"+outputFilePath.getAbsolutePath()+"'");
        }

    }//GEN-LAST:event_jButtonSaveParametersActionPerformed

    private void btnMoveInstanceDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstanceDownActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toMoveDn = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            if (toMoveDn < jListInstances.getModel().getSize() - 1) {
                for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                    if (i == toMoveDn) {
                        String temp = jListInstances.getModel().getElementAt(i);
                        dlm.addElement(jListInstances.getModel().getElementAt(i + 1));
                        dlm.addElement(temp);
                        i++;
                    } else {
                        dlm.addElement(jListInstances.getModel().getElementAt(i));
                    }
                }
                jListInstances.setModel(dlm);
                jListInstances.setSelectedIndex(Math.min(toMoveDn + 1, dlm.size() - 1));
            }
        }
    }//GEN-LAST:event_btnMoveInstanceDownActionPerformed

    private void btnMoveInstanceUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstanceUpActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toMoveUp = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                if (i == toMoveUp - 1) {
                    String temp = jListInstances.getModel().getElementAt(i);
                    dlm.addElement(jListInstances.getModel().getElementAt(i + 1));
                    dlm.addElement(temp);
                    i++;
                } else {
                    dlm.addElement(jListInstances.getModel().getElementAt(i));
                }
            }
            jListInstances.setModel(dlm);
            jListInstances.setSelectedIndex(Math.max(toMoveUp - 1, 0));
        }
    }//GEN-LAST:event_btnMoveInstanceUpActionPerformed

    private void btnAddInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInstanceActionPerformed
        // TODO add your handling code here:
        jFileChooserInstances.showOpenDialog(jPanelMain);
        File[] selected = jFileChooserInstances.getSelectedFiles();
        DefaultListModel dlm = new DefaultListModel();
        for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
            dlm.addElement(jListInstances.getModel().getElementAt(i));
        }
        for (File f : selected) {
            String path = f.getAbsolutePath();
            dlm.addElement(path);
        }

        jListInstances.setModel(dlm);
    }//GEN-LAST:event_btnAddInstanceActionPerformed

    private void jRadioButtonRelaxedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRelaxedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonRelaxedActionPerformed

    private void btnRemoveInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveInstanceActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toRemove = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                if (i != toRemove) {
                    dlm.addElement(jListInstances.getModel().getElementAt(i));
                }
            }
            jListInstances.setModel(dlm);
        }
    }//GEN-LAST:event_btnRemoveInstanceActionPerformed

    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        // TODO add your handling code here:
        System.out.println("Who are you running from? Don't be silly!");

        // Update the parameters
        updateParametersBean();

        // Retrieve all instances to run
        List<String> modelPaths = new ArrayList<>();
        for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
            modelPaths.add(jListInstances.getModel().getElementAt(i));
        }

        if (!modelPaths.isEmpty()) {
            // Disable all control windows
            this.enableControlPanel(false);

            // Retrieve information on which solver to use
            Controller.Solvers solver = Controller.Solvers.SOLVE_RELAXED;
            if (jRadioButtonALNS.isSelected()) {
                solver = Controller.Solvers.SOLVE_ALNS;
            } else if (jRadioButtonMIPS.isSelected()) {
                solver = Controller.Solvers.SOLVE_MIPS;
            } else if (jRadioButtonRelaxed.isSelected()) {
                solver = Controller.Solvers.SOLVE_RELAXED;
            }
            // Update the status bar
            updateStatusLabel("Running.");
            jProgressBar1.setIndeterminate(false);
            jProgressBar1.setValue(0);

            // Setup a new instance of controller
            controllerTask = new Controller(modelPaths,
                    orienteeringPropertiesBean,
                    alnsPropertiesBean,
                    solver,
                    textAreaOutputStream,
                    this
            );
            controllerTask.execute();
        } else {
            updateStatusLabel("No instances to solve! Ready.");
        }
    }//GEN-LAST:event_jButtonRunActionPerformed

    private void jTextFieldOutputFolderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPathActionPerformed

    private void jButtonOutputFolderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputFolderPathActionPerformed
        jFileChooserOutputFolderPath.showOpenDialog(jPanelGeneralParameters);
        File outputFolderPath = jFileChooserOutputFolderPath.getSelectedFile();
        if (outputFolderPath != null) {
            jTextFieldOutputFolderPath.setText(outputFolderPath.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonOutputFolderPathActionPerformed

    private void jTextFieldTimeLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTimeLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimeLimitActionPerformed

    private void jButtonTestBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestBeanActionPerformed
        updateParametersBean();
        jTextAreaOutput.append("Current properties bean:\n");
        jTextAreaOutput.append(parametersBean.toJSON());
    }//GEN-LAST:event_jButtonTestBeanActionPerformed

    private void jCheckBoxDestroyRandomInsertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDestroyRandomInsertionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxDestroyRandomInsertionActionPerformed

    private void updatePsiGui(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_updatePsiGui
        // TODO add your handling code here:
        updatePsiGui();
    }//GEN-LAST:event_updatePsiGui

    private void jTextFieldPsi0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi0ActionPerformed
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi0ActionPerformed

    private void jTextFieldPsi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi1ActionPerformed
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi1ActionPerformed

    private void jTextFieldPsi2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi2ActionPerformed
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi2ActionPerformed

    private void jTextFieldPsi3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi3ActionPerformed
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi3ActionPerformed

    private void jTextFieldPsi0FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi0FocusLost
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi0FocusLost

    private void jTextFieldPsi1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi1FocusLost
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi1FocusLost

    private void jTextFieldPsi2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi2FocusLost
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi2FocusLost

    private void jTextFieldPsi3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi3FocusLost
        // TODO add your handling code here:
        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi3FocusLost

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:

        // Kill the controller thread and triggers the garbage collector
        if (controllerTask != null) {
            controllerTask.cancel(true);
            controllerTask = null;
            System.gc();
        }
        
        enableControlPanel(true);

        // Update the status text
        updateStatusLabel("Stopped.");
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        // Cleanup the output area
        jTextAreaOutput.setText("");
        
        // Reset the progress bar
        jProgressBar1.setIndeterminate(false);
        jProgressBar1.setValue(0);

        // Update the status text
        updateStatusLabel("Ready.");
    }//GEN-LAST:event_jButtonResetActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mw = new MainWindow();
                // Set the title
                mw.setTitle("ALNS Solver v1.0 (GUI mode)");

                // Make the window appear
                mw.setVisible(true);

                // Make tooltips appear faster and last longer
                ToolTipManager.sharedInstance().setInitialDelay(250);
                ToolTipManager.sharedInstance().setDismissDelay(15000);
            }
        });
    }
    
    /**
     * Updates the status bar (label+progress bar).
     * @param osm the optimization status message to display.
     * @param done true if solver is done
     * @param stopped true if solver is stopped.
     */
    public void updateSolverStatusIndicators(
            OptimizationStatusMessage osm
    ){
        if(osm != null){
            switch(osm.getStatus()){
                case STARTING:
                    this.updateSolverStatusTemporary("Starting. Please wait...");
                    break;
                    
                case RUNNING:
                    this.jProgressBar1.setIndeterminate(false);
                    this.jLabelStatus.setText("Working. Solving instance '"+osm.getInstancePath()
                            +"', batch status: "+osm.getInstanceNumber()+"/"+osm.getBatchSize());
                    this.jProgressBar1.setValue(osm.getProgress());
                    break;
                    
                case STOPPING:
                    this.updateSolverStatusTemporary("Stopping. Please wait...");
                    break;
                    
                case STOPPED:
                    this.jProgressBar1.setIndeterminate(false);
                    this.jLabelStatus.setText("Stopped while solving instance '"+osm.getInstancePath()
                            +"', batch status: "+osm.getInstanceNumber()+"/"+osm.getBatchSize()+". Ready.");
                    this.jProgressBar1.setValue(osm.getProgress());
                    // Re-enable the control panel
                    this.enableControlPanel(true);
                    break;
                    
                case DONE:
                    this.jProgressBar1.setIndeterminate(false);
                    // Update the status label
                    updateStatusLabel("Done! Ready.");
                    
                    // Update the progress bar
                    this.jProgressBar1.setValue(100);

                    // Re-enable the control panel
                    this.enableControlPanel(true);
                    break;
            }
        }
        else this.updateSolverStatusTemporary("Please wait...");
    }
    
    public void updateSolverStatusTemporary(String message){
        this.jLabelStatus.setText(message);
        this.jProgressBar1.setIndeterminate(true);
    }
    
    /**
     * Enables or disables the control panel in this GUI
     * @param enabled flag to be set
     */
    private void enableControlPanel(boolean enabled){
        if(enabled){
            // Enable all control windows
            enableComponents(jPanelControls, true);
            // Disable the stop button
            jButtonStop.setEnabled(false);
            // Enable the reset and save output buttons
            jButtonReset.setEnabled(true);
            //jButtonSaveOutput.setEnabled(true);
        }
        else {
            // Disable all control windows
            enableComponents(jPanelControls, false);
            // Enable the stop button
            jButtonStop.setEnabled(true);
            // Disable the reset and save output buttons
            jButtonReset.setEnabled(false);
            //jButtonSaveOutput.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public void openWindow(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        this.setTitle("ALNS Solver v1.0 (GUI mode)");
        this.setVisible(true);
        ToolTipManager.sharedInstance().setInitialDelay(250);
        ToolTipManager.sharedInstance().setDismissDelay(15000);
    }

    /**
     * Sets the "enabled" flag of every component in the specified container
     *
     * @param container the parent container to start setting the enabled flag
     * from
     * @param enable the enable flag to set
     */
    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }

    /**
     * Updates all values of psi in the GUI
     */
    private void updatePsiGui() {
        jTextFieldPsi0.setText(alnsPropertiesBean.getHeuristicScores()[0] + "");
        jTextFieldPsi1.setText(alnsPropertiesBean.getHeuristicScores()[1] + "");
        jTextFieldPsi2.setText(alnsPropertiesBean.getHeuristicScores()[2] + "");
        jTextFieldPsi3.setText(alnsPropertiesBean.getHeuristicScores()[3] + "");
        jTextFieldPsi0.updateUI();
        jTextFieldPsi1.updateUI();
        jTextFieldPsi2.updateUI();
        jTextFieldPsi3.updateUI();
    }

    /**
     * This method updates the values of psi in the ALNS properties bean, using
     * the values written in the psi text fields.
     */
    private void updatePsiBean() {
        double[] toSet = new double[4];
        toSet[0] = Double.parseDouble(jTextFieldPsi0.getText());
        toSet[1] = Double.parseDouble(jTextFieldPsi1.getText());
        toSet[2] = Double.parseDouble(jTextFieldPsi2.getText());
        toSet[3] = Double.parseDouble(jTextFieldPsi3.getText());
        alnsPropertiesBean.setHeuristicScores(toSet);
    }

    /**
     * This method updates jTextAreaOutput with the output from the optimization
     * algorithms
     *
     * @param text the text to put in jTextAreaOutput
     */
    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                jTextAreaOutput.append(text);
            }
        });
    }

    // These two allow me to get the outputstream and give it to other classes
    private OutputStream textAreaOutputStream;

    public OutputStream getTextAreaOutputStream() {
        return textAreaOutputStream;
    }

    /**
     * Redirects System Streams to jTextAreaOutput
     */
    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private solverController.ALNSPropertiesBean alnsPropertiesBean;
    private javax.swing.JButton btnAddInstance;
    private javax.swing.JButton btnMoveInstanceDown;
    private javax.swing.JButton btnMoveInstanceUp;
    private javax.swing.JButton btnRemoveInstance;
    private javax.swing.ButtonGroup buttonGroupActions;
    private javax.swing.ButtonGroup buttonGroupInstance;
    private javax.swing.ButtonGroup buttonGroupSolver;
    private javax.swing.JButton jButtonLoadParameters;
    private javax.swing.JButton jButtonOutputFolderPath;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JButton jButtonSaveParameters;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JButton jButtonTestBean;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyBestInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyCostInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyProfitInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyRandomInsertion;
    private javax.swing.JCheckBox jCheckBoxForceHeuristicConstraints;
    private javax.swing.JCheckBox jCheckBoxRepairHighCostRemoval;
    private javax.swing.JCheckBox jCheckBoxRepairRandomRemoval;
    private javax.swing.JCheckBox jCheckBoxRepairTravelTime;
    private javax.swing.JCheckBox jCheckBoxRepairVehicleTime;
    private javax.swing.JCheckBox jCheckBoxRepairWorstRemoval;
    private javax.swing.JFileChooser jFileChooserInstances;
    private javax.swing.JFileChooser jFileChooserLoadParameters;
    private javax.swing.JFileChooser jFileChooserOutputFolderPath;
    private javax.swing.JFileChooser jFileChooserSaveOutput;
    private javax.swing.JFileChooser jFileChooserSaveParameters;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelOutputFolderPath;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList<String> jListInstances;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelALNSParameters;
    private javax.swing.JPanel jPanelActions;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelDestroyHeuristics;
    private javax.swing.JPanel jPanelGeneralParameters;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JPanel jPanelParameters;
    private javax.swing.JPanel jPanelParametersEnvelope;
    private javax.swing.JPanel jPanelPsi;
    private javax.swing.JPanel jPanelRepairHeuristics;
    private javax.swing.JPanel jPanelSolver;
    private javax.swing.JPanel jPanelStatusBar;
    private javax.swing.JPanel jPanelnstances;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonALNS;
    private javax.swing.JRadioButton jRadioButtonMIPS;
    private javax.swing.JRadioButton jRadioButtonRelaxed;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneTextAreaOutput;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextFieldAlpha;
    private javax.swing.JTextField jTextFieldLambda;
    private javax.swing.JTextField jTextFieldMaxIterationsWithoutImprovement;
    private javax.swing.JTextField jTextFieldMaxMIPSNodesForFeasibilityCheck;
    private javax.swing.JTextField jTextFieldMaxSegments;
    private javax.swing.JTextField jTextFieldMaxSegmentsWithoutImprovement;
    private javax.swing.JTextField jTextFieldNumThreads;
    private javax.swing.JTextField jTextFieldOutputFolderPath;
    private javax.swing.JTextField jTextFieldPsi0;
    private javax.swing.JTextField jTextFieldPsi1;
    private javax.swing.JTextField jTextFieldPsi2;
    private javax.swing.JTextField jTextFieldPsi3;
    private javax.swing.JTextField jTextFieldPunishmentForWorstSegmentHeuristics;
    private javax.swing.JTextField jTextFieldQDelta;
    private javax.swing.JTextField jTextFieldQStart;
    private javax.swing.JTextField jTextFieldRewardForBestSegmentHeuristics;
    private javax.swing.JTextField jTextFieldSegmentSize;
    private javax.swing.JTextField jTextFieldTimeLimit;
    private javax.swing.JTextField jTextFieldTimeLimitALNS;
    private javax.swing.JTextField jTextFieldTimeLimitLocalSearch;
    private solverController.OrienteeringPropertiesBean orienteeringPropertiesBean;
    private solverController.ParametersBean parametersBean;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the text in the status bar.
     *
     * @param statusText
     */
    private void updateStatusLabel(String statusText) {
        jLabelStatus.setText(statusText);
        jLabelStatus.updateUI();
    }

    /**
     * Updates the parameters bean with the latest version of the parameters in
     * alnsPropertiesBean and orienteeringPropertiesBean. Necessary before
     * parameter visualization/serialization.
     */
    private void updateParametersBean() {
        parametersBean = new ParametersBean(orienteeringPropertiesBean, alnsPropertiesBean);
    }
}
