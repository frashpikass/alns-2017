/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package solverView;

import java.awt.Color;
import solverView.bindingInterfaces.ErrorBindingListener;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Insets;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.Converter;
import org.jdesktop.beansbinding.Validator;
import org.jdesktop.beansbinding.Validator.Result;
import solverController.Controller;
import solverController.OptimizationStatusMessage;
import solverController.ParametersBean;
import solverController.Solution;

/**
 *
 * @author Frash
 */
public class MainWindow extends javax.swing.JFrame {
    /**
     * Current version of CTOWSS ALNS GUI
     */
    public final static String SOFTWARE_VERSION = "1.7";

    /**
     * Pointer to the controller task at hand
     */
    private Controller controllerTask = null;
    
    /**
     * Incremental index representing the last solution report number
     */
    private int lastSolutionReportNumber;
    
    /**
     * Remembers all the open solutionReports
     */
    private ArrayList<SolutionReportPane> solutionReports;
    
    /**
     * Listens to binding errors
     */
    private ErrorBindingListener errorBindingListener;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        // Redirecting all System Streams to jTextAreaOutput (virtual console)
        redirectSystemStreams();
        
        // Adding a binding listener to keep track of binding or validation errors
        errorBindingListener = new ErrorBindingListener(jLabelStatus);
        bindingGroup.addBindingListener(errorBindingListener);
        
        // Setup a smart scroller on the output text area
        new SmartScroller(jScrollPaneTextAreaOutput);
        
        // Setup a form scroller to support viewport scrolling when tabbing
        // through fields
        FormScroller scrollerALNS = new FormScroller( jScrollPaneALNS );
        scrollerALNS.setScrollInsets( new Insets(5, 0, 5, 0) );
        
        FormScroller scrollerMIPS = new FormScroller( jScrollPaneMIPS );
        scrollerMIPS.setScrollInsets( new Insets(5, 0, 5, 0) );
        
        FormScroller scrollerRelax = new FormScroller( jScrollPaneRelaxParam );
        scrollerRelax.setScrollInsets( new Insets(5, 0, 5, 0) );
        
        FormScroller scrollerInstances = new FormScroller( jScrollPaneInstances );
        scrollerInstances.setScrollInsets( new Insets(5, 0, 5, 0) );
        
        // Speeding up scrollers
        jScrollPaneALNS.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPaneMIPS.getVerticalScrollBar().setUnitIncrement(16);
        
        // Show Deprecated tools window
        jDialogDeprecatedOptions.setVisible(false);
        
        // Set the position of the error dialog
        jDialogError.setLocationRelativeTo(jPanelControls);
        
        // Initialize report numbers
        this.lastSolutionReportNumber = 0;
        
        // Initialize solution reports
        solutionReports = new ArrayList<>();
        
        psibeanAdapter1.setAlnsPropertiesBean(this.parametersBean.getALNSproperties());
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroupSolver = new javax.swing.ButtonGroup();
        buttonGroupInstance = new javax.swing.ButtonGroup();
        jFileChooserInstances = new javax.swing.JFileChooser();
        buttonGroupActions = new javax.swing.ButtonGroup();
        jTextField19 = new javax.swing.JTextField();
        jFileChooserOutputFolderPath = new javax.swing.JFileChooser();
        jFileChooserLoadParameters = new javax.swing.JFileChooser();
        jFileChooserSaveParameters = new javax.swing.JFileChooser();
        jFileChooserSaveOutput = new javax.swing.JFileChooser();
        parametersBean = new solverController.ParametersBean();
        pathCacheBean = new solverView.PathCacheBean();
        jFileChooserWorkingDirectory = new javax.swing.JFileChooser();
        doubleConverter1 = new solverView.bindingInterfaces.DoubleConverter();
        jDialogError = new javax.swing.JDialog();
        jLabelErrorMessage = new javax.swing.JLabel();
        jButtonErrorOk = new javax.swing.JButton();
        jLabelErrorIcon = new javax.swing.JLabel();
        jDialogDeprecatedOptions = new javax.swing.JDialog();
        jPanelSolver = new javax.swing.JPanel();
        jRadioButtonMIPS = new javax.swing.JRadioButton();
        jRadioButtonRelaxed = new javax.swing.JRadioButton();
        jRadioButtonALNS = new javax.swing.JRadioButton();
        jPanelActions = new javax.swing.JPanel();
        jButtonSaveParameters = new javax.swing.JButton();
        jButtonLoadParameters = new javax.swing.JButton();
        jButtonRun = new javax.swing.JButton();
        jButtonTestBean = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jDialogConfirmStop = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 15), new java.awt.Dimension(0, 15), new java.awt.Dimension(32767, 15));
        jPanel7 = new javax.swing.JPanel();
        jButtonYesStop = new javax.swing.JButton();
        jButtonNoStop = new javax.swing.JButton();
        positiveIntegerValidator1 = new solverView.bindingInterfaces.PositiveIntegerValidator();
        integerConverter1 = new solverView.bindingInterfaces.IntegerConverter();
        probabilityValueValidator1 = new solverView.bindingInterfaces.ProbabilityValueValidator();
        positiveDoubleValidator1 = new solverView.bindingInterfaces.PositiveDoubleValidator();
        positiveLongValidator1 = new solverView.bindingInterfaces.PositiveLongValidator();
        longConverter1 = new solverView.bindingInterfaces.LongConverter();
        psibeanAdapter1 = new solverView.bindingInterfaces.PsibeanAdapter();
        positiveOrZeroIntegerValidator1 = new solverView.bindingInterfaces.PositiveOrZeroIntegerValidator();
        jPanelMain = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanelControls = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelnstances = new javax.swing.JPanel();
        jScrollPaneInstances = new javax.swing.JScrollPane();
        jListInstances = new javax.swing.JList<>();
        jPanelInstancesButtons = new javax.swing.JPanel();
        btnAddInstance = new javax.swing.JButton();
        btnRemoveInstance = new javax.swing.JButton();
        btnMoveInstanceUp = new javax.swing.JButton();
        btnMoveInstanceDown = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jPanelSolversEnvelope = new javax.swing.JPanel();
        jTabbedPaneSolvers = new javax.swing.JTabbedPane();
        jPaneMIPS = new javax.swing.JPanel();
        jScrollPaneMIPS = new javax.swing.JScrollPane();
        jPanelMIPSParameters = new javax.swing.JPanel();
        jLabelOutputFolderPath1 = new javax.swing.JLabel();
        jTextFieldOutputFolderPath1 = new javax.swing.JTextField();
        jButtonOutputFolderPath1 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jTextFieldTimeLimit1 = new javax.swing.JTextField();
        jCheckBoxForceHeuristicConstraints1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jSliderThreadsMIPS = new javax.swing.JSlider();
        jLabelThreadsMIPS = new javax.swing.JLabel();
        jPaneMIPSActions = new javax.swing.JPanel();
        jButtonRunMIPS = new javax.swing.JButton();
        jButtonLoadParametersMIPS = new javax.swing.JButton();
        jButtonSaveParametersMIPS = new javax.swing.JButton();
        jPanelALNS = new javax.swing.JPanel();
        jScrollPaneALNS = new javax.swing.JScrollPane();
        jPanelALNSParameters = new javax.swing.JPanel();
        jPanelALNSGeneralParams = new javax.swing.JPanel();
        jLabelOutputFolderPath2 = new javax.swing.JLabel();
        jTextFieldOutputFolderPath2 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jButtonOutputFolderPath2 = new javax.swing.JButton();
        jTextFieldTimeLimitALNS = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jSliderThreadsALNS = new javax.swing.JSlider();
        jLabelThreadsALNS = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldTimeLimitLocalSearch = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jPanelProgression = new javax.swing.JPanel();
        jTextFieldQStart = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldQDelta = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldSegmentSize = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldMaxIterationsWithoutImprovement = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldAlpha = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanelHeuristics = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldLambda = new javax.swing.JTextField();
        jPanelRepairHeuristics = new javax.swing.JPanel();
        jCheckBoxRepairHighCostRemoval = new javax.swing.JCheckBox();
        jCheckBoxRepairRandomRemoval = new javax.swing.JCheckBox();
        jCheckBoxRepairTravelTime = new javax.swing.JCheckBox();
        jCheckBoxRepairVehicleTime = new javax.swing.JCheckBox();
        jCheckBoxRepairWorstRemoval = new javax.swing.JCheckBox();
        jPanelDestroyHeuristics = new javax.swing.JPanel();
        jCheckBoxDestroyGreedyCostInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyGreedyBestInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyGreedyProfitInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyRandomInsertion = new javax.swing.JCheckBox();
        jCheckBoxDestroyCloseToBarycenter = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        jPanelPsi = new javax.swing.JPanel();
        jTextFieldPsi0 = new javax.swing.JTextField();
        jTextFieldPsi1 = new javax.swing.JTextField();
        jTextFieldPsi2 = new javax.swing.JTextField();
        jTextFieldPsi3 = new javax.swing.JTextField();
        jTextFieldRewardForBestSegmentHeuristics = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldPunishmentForWorstSegmentHeuristics = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanelClusterRoulette = new javax.swing.JPanel();
        jTextFieldPunishmentGamma = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldCooldownGamma = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldWarmupGamma = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldNerfBarrier = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanelFineTunings = new javax.swing.JPanel();
        jTextFieldMaxMIPSNodesForFeasibilityCheck = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldMaxSegments = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMaxSegmentsWithoutImprovement = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanelALNSActions = new javax.swing.JPanel();
        jButtonRunALNS = new javax.swing.JButton();
        jButtonLoadParametersALNS = new javax.swing.JButton();
        jButtonSaveParametersALNS = new javax.swing.JButton();
        jButtonResetParametersALNS = new javax.swing.JButton();
        jPanelRelaxed = new javax.swing.JPanel();
        jPanelRelaxedActions = new javax.swing.JPanel();
        jButtonRunRelaxed = new javax.swing.JButton();
        jScrollPaneRelaxParam = new javax.swing.JScrollPane();
        jPanelRelaxedParameters = new javax.swing.JPanel();
        jButtonOutputFolderPath = new javax.swing.JButton();
        jTextFieldOutputFolderPath = new javax.swing.JTextField();
        jLabelOutputFolderPath = new javax.swing.JLabel();
        jCheckBoxForceHeuristicConstraints2 = new javax.swing.JCheckBox();
        jPanelOutput = new javax.swing.JPanel();
        jTabbedPaneOutputs = new javax.swing.JTabbedPane();
        jPanelConsoleOutput = new javax.swing.JPanel();
        jScrollPaneTextAreaOutput = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jPanelStopClear = new javax.swing.JPanel();
        jButtonStop = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jButtonCloseAllReports = new javax.swing.JButton();
        jButtonOpenOutputFolder = new javax.swing.JButton();
        jPanelStatusBar = new javax.swing.JPanel();
        jPanelSBTop = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jPanelSBBottom = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabelSelectedSolver = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabelBestObj = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        jFileChooserInstances.setAccessory(btnAddInstance);
        jFileChooserInstances.setDialogTitle("Select instance file(s) to add");
        jFileChooserInstances.setFileFilter(new FileNameExtensionFilter("TXT File","txt"));
        jFileChooserInstances.setMultiSelectionEnabled(true);
        jFileChooserInstances.setSelectedFiles(null);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pathCacheBean, org.jdesktop.beansbinding.ELProperty.create("${pathToLastDirectory}"), jFileChooserInstances, org.jdesktop.beansbinding.BeanProperty.create("currentDirectory"), "pathToLastDirectory1");
        binding.setSourceNullValue(Paths.get(System.getProperty("user.home")).toFile());
        bindingGroup.addBinding(binding);

        jTextField19.setText("jTextField19");

        jFileChooserOutputFolderPath.setAcceptAllFileFilterUsed(false);
        jFileChooserOutputFolderPath.setDialogTitle("Choose the output directory");
        jFileChooserOutputFolderPath.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooserOutputFolderPath.setToolTipText("Choose the output directory");

        jFileChooserLoadParameters.setDialogTitle("Load parameters from JSON");
        jFileChooserLoadParameters.setFileFilter(new FileNameExtensionFilter("JSON File","json"));

        jFileChooserSaveParameters.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooserSaveParameters.setDialogTitle("Save parameters to JSON");
        jFileChooserSaveParameters.setSelectedFile(new java.io.File("C:\\Program Files\\NetBeans 8.2\\myparams.json"));
        jFileChooserSaveParameters.setToolTipText(null);

        jFileChooserSaveOutput.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooserSaveOutput.setDialogTitle("Choose a destination for the output file");

        jFileChooserWorkingDirectory.setDialogTitle("Choose the working directory");
        jFileChooserWorkingDirectory.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        jDialogError.setTitle("Error");
        jDialogError.setIconImage(null);
        jDialogError.setMinimumSize(new java.awt.Dimension(400, 200));
        jDialogError.setModal(true);
        jDialogError.setResizable(false);
        jDialogError.setType(java.awt.Window.Type.POPUP);
        jDialogError.getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabelErrorMessage.setText("Error message!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 30;
        jDialogError.getContentPane().add(jLabelErrorMessage, gridBagConstraints);

        jButtonErrorOk.setText("OK");
        jButtonErrorOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonErrorOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jDialogError.getContentPane().add(jButtonErrorOk, gridBagConstraints);

        jLabelErrorIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/alert.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jDialogError.getContentPane().add(jLabelErrorIcon, gridBagConstraints);

        jDialogDeprecatedOptions.setBounds(new java.awt.Rectangle(50, 50, 100, 200));
        jDialogDeprecatedOptions.setLocation(new java.awt.Point(50, 50));
        jDialogDeprecatedOptions.setMinimumSize(new java.awt.Dimension(100, 300));
        jDialogDeprecatedOptions.setSize(new java.awt.Dimension(200, 400));
        jDialogDeprecatedOptions.setType(java.awt.Window.Type.UTILITY);
        jDialogDeprecatedOptions.getContentPane().setLayout(new javax.swing.BoxLayout(jDialogDeprecatedOptions.getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanelSolver.setBorder(javax.swing.BorderFactory.createTitledBorder("Solver"));
        java.awt.GridBagLayout jPanelSolverLayout = new java.awt.GridBagLayout();
        jPanelSolverLayout.columnWidths = new int[] {0};
        jPanelSolverLayout.rowHeights = new int[] {0, 10, 0, 10, 0};
        jPanelSolver.setLayout(jPanelSolverLayout);

        buttonGroupSolver.add(jRadioButtonMIPS);
        jRadioButtonMIPS.setText("MIPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonMIPS, gridBagConstraints);

        buttonGroupSolver.add(jRadioButtonRelaxed);
        jRadioButtonRelaxed.setText("Relaxed");
        jRadioButtonRelaxed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRelaxedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonRelaxed, gridBagConstraints);

        buttonGroupSolver.add(jRadioButtonALNS);
        jRadioButtonALNS.setSelected(true);
        jRadioButtonALNS.setText("ALNS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelSolver.add(jRadioButtonALNS, gridBagConstraints);

        jDialogDeprecatedOptions.getContentPane().add(jPanelSolver);

        jPanelActions.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));
        java.awt.GridBagLayout jPanelActionsLayout = new java.awt.GridBagLayout();
        jPanelActionsLayout.columnWidths = new int[] {0};
        jPanelActionsLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelActions.setLayout(jPanelActionsLayout);

        jButtonSaveParameters.setText("Save Parameters");
        buttonGroupActions.add(jButtonSaveParameters);
        jButtonSaveParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveParametersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelActions.add(jButtonSaveParameters, gridBagConstraints);

        jButtonLoadParameters.setText("Load Parameters");
        buttonGroupActions.add(jButtonLoadParameters);
        jButtonLoadParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadParametersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelActions.add(jButtonLoadParameters, gridBagConstraints);

        jButtonRun.setText("Run!");
        buttonGroupActions.add(jButtonRun);
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 107;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelActions.add(jButtonRun, gridBagConstraints);

        jButtonTestBean.setText("Show parameters JSON");
        jButtonTestBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestBeanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelActions.add(jButtonTestBean, gridBagConstraints);

        jButton1.setText("Stop debugger");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        jPanelActions.add(jButton1, gridBagConstraints);

        jDialogDeprecatedOptions.getContentPane().add(jPanelActions);

        jDialogConfirmStop.setTitle("Warning");
        jDialogConfirmStop.setMinimumSize(new java.awt.Dimension(400, 125));
        jDialogConfirmStop.setModal(true);
        jDialogConfirmStop.setResizable(false);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/alert.png"))); // NOI18N
        jPanel6.add(jLabel17, java.awt.BorderLayout.CENTER);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("<html>Are you sure you want to stop the solver?\n<br />The batch process will also stop.\n</html>");
        jLabel29.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel6.add(jLabel29, java.awt.BorderLayout.LINE_END);
        jPanel6.add(filler4, java.awt.BorderLayout.EAST);

        jDialogConfirmStop.getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jButtonYesStop.setText("Yes");
        jButtonYesStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonYesStopActionPerformed(evt);
            }
        });
        jPanel7.add(jButtonYesStop);

        jButtonNoStop.setText("No");
        jButtonNoStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNoStopActionPerformed(evt);
            }
        });
        jPanel7.add(jButtonNoStop);

        jDialogConfirmStop.getContentPane().add(jPanel7, java.awt.BorderLayout.SOUTH);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTOWSS ALNS v"+SOFTWARE_VERSION+" (GUI mode)");
        setPreferredSize(new java.awt.Dimension(1230, 800));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanelMain.setPreferredSize(new java.awt.Dimension(1230, 600));
        jPanelMain.setLayout(new javax.swing.BoxLayout(jPanelMain, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanelControls.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));
        jPanelControls.setToolTipText(null);
        jPanelControls.setLayout(new javax.swing.BoxLayout(jPanelControls, javax.swing.BoxLayout.PAGE_AXIS));

        jSplitPane1.setDividerLocation(450);

        jPanelnstances.setBorder(javax.swing.BorderFactory.createTitledBorder("1. Add instances to batch"));
        jPanelnstances.setMinimumSize(new java.awt.Dimension(94, 180));
        jPanelnstances.setLayout(new javax.swing.BoxLayout(jPanelnstances, javax.swing.BoxLayout.LINE_AXIS));

        jListInstances.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jListInstances.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListInstances.setToolTipText(null);
        jScrollPaneInstances.setViewportView(jListInstances);

        jPanelnstances.add(jScrollPaneInstances);

        jPanelInstancesButtons.setLayout(new javax.swing.BoxLayout(jPanelInstancesButtons, javax.swing.BoxLayout.PAGE_AXIS));

        btnAddInstance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playlist-plus.png"))); // NOI18N
        btnAddInstance.setToolTipText("Add a new instance to the batch");
        buttonGroupInstance.add(btnAddInstance);
        btnAddInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInstanceActionPerformed(evt);
            }
        });
        jPanelInstancesButtons.add(btnAddInstance);

        btnRemoveInstance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playlist-minus.png"))); // NOI18N
        btnRemoveInstance.setToolTipText("Remove the selected instance from the batch");
        buttonGroupInstance.add(btnRemoveInstance);
        btnRemoveInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveInstanceActionPerformed(evt);
            }
        });
        jPanelInstancesButtons.add(btnRemoveInstance);

        btnMoveInstanceUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chevron-double-up.png"))); // NOI18N
        btnMoveInstanceUp.setToolTipText("Move the selected instance up in the batch");
        buttonGroupInstance.add(btnMoveInstanceUp);
        btnMoveInstanceUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveInstanceUpActionPerformed(evt);
            }
        });
        jPanelInstancesButtons.add(btnMoveInstanceUp);

        btnMoveInstanceDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chevron-double-down.png"))); // NOI18N
        btnMoveInstanceDown.setToolTipText("Move the selected instance down in the batch");
        buttonGroupInstance.add(btnMoveInstanceDown);
        btnMoveInstanceDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveInstanceDownActionPerformed(evt);
            }
        });
        jPanelInstancesButtons.add(btnMoveInstanceDown);

        jPanelnstances.add(jPanelInstancesButtons);
        jPanelnstances.add(filler3);

        jSplitPane1.setLeftComponent(jPanelnstances);

        jPanelSolversEnvelope.setBorder(javax.swing.BorderFactory.createTitledBorder("2. Select, configure and run a solver"));
        jPanelSolversEnvelope.setMinimumSize(new java.awt.Dimension(362, 180));
        jPanelSolversEnvelope.setLayout(new javax.swing.BoxLayout(jPanelSolversEnvelope, javax.swing.BoxLayout.LINE_AXIS));

        jTabbedPaneSolvers.setToolTipText("Use a MIPS solver");
        jTabbedPaneSolvers.setMinimumSize(new java.awt.Dimension(350, 320));
        jTabbedPaneSolvers.setPreferredSize(new java.awt.Dimension(650, 326));

        jPaneMIPS.setMinimumSize(new java.awt.Dimension(300, 18));
        jPaneMIPS.setPreferredSize(new java.awt.Dimension(300, 240));
        jPaneMIPS.setLayout(new java.awt.BorderLayout());

        jScrollPaneMIPS.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        jScrollPaneMIPS.setMinimumSize(new java.awt.Dimension(300, 18));

        jPanelMIPSParameters.setMinimumSize(new java.awt.Dimension(300, 180));
        jPanelMIPSParameters.setPreferredSize(new java.awt.Dimension(300, 180));
        java.awt.GridBagLayout jPanelMIPSParametersLayout = new java.awt.GridBagLayout();
        jPanelMIPSParametersLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelMIPSParametersLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelMIPSParameters.setLayout(jPanelMIPSParametersLayout);

        jLabelOutputFolderPath1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelOutputFolderPath1.setText("Output folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelMIPSParameters.add(jLabelOutputFolderPath1, gridBagConstraints);

        jTextFieldOutputFolderPath1.setToolTipText("Choose the output directory");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.outputFolderPath}"), jTextFieldOutputFolderPath1, org.jdesktop.beansbinding.BeanProperty.create("text"), "MIPS: output folder");
        bindingGroup.addBinding(binding);

        jTextFieldOutputFolderPath1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldOutputFolderPath1updatePsiBean(evt);
            }
        });
        jTextFieldOutputFolderPath1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutputFolderPath1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelMIPSParameters.add(jTextFieldOutputFolderPath1, gridBagConstraints);

        jButtonOutputFolderPath1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-open.png"))); // NOI18N
        jButtonOutputFolderPath1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputFolderPath1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelMIPSParameters.add(jButtonOutputFolderPath1, gridBagConstraints);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Global time limit for MIPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelMIPSParameters.add(jLabel26, gridBagConstraints);

        jTextFieldTimeLimit1.setToolTipText("Sets how long (in seconds) should the MIPS solver run for");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.timeLimit}"), jTextFieldTimeLimit1, org.jdesktop.beansbinding.BeanProperty.create("text"), "MIPS: solver time limit");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldTimeLimit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTimeLimit1updatePsiBean(evt);
            }
        });
        jTextFieldTimeLimit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTimeLimit1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelMIPSParameters.add(jTextFieldTimeLimit1, gridBagConstraints);

        jCheckBoxForceHeuristicConstraints1.setText("Use heuristic constraints in MIPS");
        jCheckBoxForceHeuristicConstraints1.setToolTipText("<html>If checked, heuristic constraints will always be used every time the MIPS solver is run.\n<br>These constraints clean up the model to speed up the search.\n<br><b>Warning:</b> forcing these constraints on might turn a feasible model into an infeasible one.\n<br>Turn this option off if the log says the model is infeasible!");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.forceHeuristicConstraints}"), jCheckBoxForceHeuristicConstraints1, org.jdesktop.beansbinding.BeanProperty.create("selected"), "MIPS: force heuristic constraints");
        bindingGroup.addBinding(binding);

        jCheckBoxForceHeuristicConstraints1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxForceHeuristicConstraints1updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelMIPSParameters.add(jCheckBoxForceHeuristicConstraints1, gridBagConstraints);

        jLabel3.setText("seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelMIPSParameters.add(jLabel3, gridBagConstraints);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("Number of threads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanelMIPSParameters.add(jLabel32, gridBagConstraints);

        jSliderThreadsMIPS.setMajorTickSpacing(4);
        jSliderThreadsMIPS.setMaximum(16);
        jSliderThreadsMIPS.setMinorTickSpacing(1);
        jSliderThreadsMIPS.setPaintLabels(true);
        jSliderThreadsMIPS.setPaintTicks(true);
        jSliderThreadsMIPS.setToolTipText("<html>\nSelect how many threads should be used by the MIPS solver (also affects ALNS).\n<br/>Set it to 0 to use all the available CPU cores.\n<br/><b>NOTE:</b> if your CPU has hyperthreading, we suggest you to use only half of the available cores.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.numThreads}"), jSliderThreadsMIPS, org.jdesktop.beansbinding.BeanProperty.create("value"), "MIPS: Number of threads slider");
        bindingGroup.addBinding(binding);

        jSliderThreadsMIPS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderThreadsMIPSStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelMIPSParameters.add(jSliderThreadsMIPS, gridBagConstraints);

        jLabelThreadsMIPS.setText("<html>default: number of cores\n<br><i>Avoid if CPU has hyperthreading</i>");
        jLabelThreadsMIPS.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabelThreadsMIPS.setPreferredSize(new java.awt.Dimension(155, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelMIPSParameters.add(jLabelThreadsMIPS, gridBagConstraints);

        jScrollPaneMIPS.setViewportView(jPanelMIPSParameters);

        jPaneMIPS.add(jScrollPaneMIPS, java.awt.BorderLayout.CENTER);

        jPaneMIPSActions.setMinimumSize(new java.awt.Dimension(300, 80));

        jButtonRunMIPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        jButtonRunMIPS.setText("Solve with MIPS (exact)");
        buttonGroupActions.add(jButtonRunMIPS);
        jButtonRunMIPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunMIPSActionPerformed(evt);
            }
        });
        jPaneMIPSActions.add(jButtonRunMIPS);

        jButtonLoadParametersMIPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-in-app.png"))); // NOI18N
        jButtonLoadParametersMIPS.setText("Load parameters");
        jButtonLoadParametersMIPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadParametersMIPSActionPerformed(evt);
            }
        });
        jPaneMIPSActions.add(jButtonLoadParametersMIPS);

        jButtonSaveParametersMIPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/content-save.png"))); // NOI18N
        jButtonSaveParametersMIPS.setText("Save parameters");
        jButtonSaveParametersMIPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveParametersMIPSActionPerformed(evt);
            }
        });
        jPaneMIPSActions.add(jButtonSaveParametersMIPS);

        jPaneMIPS.add(jPaneMIPSActions, java.awt.BorderLayout.PAGE_START);

        jTabbedPaneSolvers.addTab("MIPS", jPaneMIPS);

        jPanelALNS.setLayout(new java.awt.BorderLayout());

        jScrollPaneALNS.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        jPanelALNSParameters.setMinimumSize(new java.awt.Dimension(600, 1200));
        jPanelALNSParameters.setName(""); // NOI18N
        jPanelALNSParameters.setRequestFocusEnabled(false);
        jPanelALNSParameters.setLayout(new javax.swing.BoxLayout(jPanelALNSParameters, javax.swing.BoxLayout.PAGE_AXIS));

        jPanelALNSGeneralParams.setBorder(javax.swing.BorderFactory.createTitledBorder("General Parameters"));
        java.awt.GridBagLayout jPanelALNSGeneralParamsLayout = new java.awt.GridBagLayout();
        jPanelALNSGeneralParamsLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelALNSGeneralParamsLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelALNSGeneralParams.setLayout(jPanelALNSGeneralParamsLayout);

        jLabelOutputFolderPath2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelOutputFolderPath2.setText("Output folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSGeneralParams.add(jLabelOutputFolderPath2, gridBagConstraints);

        jTextFieldOutputFolderPath2.setToolTipText("Choose the output directory");
        jTextFieldOutputFolderPath2.setPreferredSize(new java.awt.Dimension(60, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.outputFolderPath}"), jTextFieldOutputFolderPath2, org.jdesktop.beansbinding.BeanProperty.create("text"), "ALNS output folder");
        bindingGroup.addBinding(binding);

        jTextFieldOutputFolderPath2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldOutputFolderPath2updatePsiBean(evt);
            }
        });
        jTextFieldOutputFolderPath2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutputFolderPath2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        jPanelALNSGeneralParams.add(jTextFieldOutputFolderPath2, gridBagConstraints);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Number of threads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanelALNSGeneralParams.add(jLabel28, gridBagConstraints);

        jButtonOutputFolderPath2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-open.png"))); // NOI18N
        jButtonOutputFolderPath2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputFolderPath2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelALNSGeneralParams.add(jButtonOutputFolderPath2, gridBagConstraints);

        jTextFieldTimeLimitALNS.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldTimeLimitALNS.setToolTipText("<html>\n<b>ALNS time limit</b>\n<br>Maximum runtime for the ALNS heuristic algorithm (in seconds).\n<br>When this time is reached, the ALNS solver execution terminates.");
        jTextFieldTimeLimitALNS.setPreferredSize(new java.awt.Dimension(100, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.timeLimitALNS}"), jTextFieldTimeLimitALNS, org.jdesktop.beansbinding.BeanProperty.create("text"), "timeLimitALNS");
        binding.setConverter(longConverter1);
        binding.setValidator(positiveLongValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldTimeLimitALNS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSGeneralParams.add(jTextFieldTimeLimitALNS, gridBagConstraints);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("ALNS time limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelALNSGeneralParams.add(jLabel10, gridBagConstraints);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("seconds (allocated at the end of each segment)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelALNSGeneralParams.add(jLabel31, gridBagConstraints);

        jSliderThreadsALNS.setMajorTickSpacing(4);
        jSliderThreadsALNS.setMaximum(16);
        jSliderThreadsALNS.setMinorTickSpacing(1);
        jSliderThreadsALNS.setPaintLabels(true);
        jSliderThreadsALNS.setPaintTicks(true);
        jSliderThreadsALNS.setToolTipText("<html>\nSelect how many threads should be used by the MIPS solver (also affects ALNS).\n<br/>Set it to 0 to use all the available CPU cores.\n<br/><b>NOTE:</b> if your CPU has hyperthreading, we suggest you to use only half of the available cores.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.numThreads}"), jSliderThreadsALNS, org.jdesktop.beansbinding.BeanProperty.create("value"), "ALNS: Number of threads slider");
        bindingGroup.addBinding(binding);

        jSliderThreadsALNS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderThreadsALNSStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        jPanelALNSGeneralParams.add(jSliderThreadsALNS, gridBagConstraints);

        jLabelThreadsALNS.setText("<html>default: number of cores\n<br><i>Avoid if CPU has hyperthreading</i>");
        jLabelThreadsALNS.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabelThreadsALNS.setPreferredSize(new java.awt.Dimension(155, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelALNSGeneralParams.add(jLabelThreadsALNS, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Local search time limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanelALNSGeneralParams.add(jLabel11, gridBagConstraints);

        jTextFieldTimeLimitLocalSearch.setToolTipText("<html>\n<b>ALNS local search time limit</b>\n<br>Maximum runtime (in seconds) for the local search process.\n<br>A MIPS local search is run at the end of every segment, when possible.\n<br>The local search process takes advantage of all the heuristic constraints\n<br>defined by our Optimization Algorithms team.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.timeLimitLocalSearch}"), jTextFieldTimeLimitLocalSearch, org.jdesktop.beansbinding.BeanProperty.create("text"), "timeLimitLocalSearch");
        binding.setConverter(longConverter1);
        binding.setValidator(positiveLongValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldTimeLimitLocalSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelALNSGeneralParams.add(jTextFieldTimeLimitLocalSearch, gridBagConstraints);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel35.setText("seconds (in total)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelALNSGeneralParams.add(jLabel35, gridBagConstraints);

        jPanelALNSParameters.add(jPanelALNSGeneralParams);

        jPanelProgression.setBorder(javax.swing.BorderFactory.createTitledBorder("ALNS progression (Iterations & Segments)"));
        java.awt.GridBagLayout jPanelProgressionLayout = new java.awt.GridBagLayout();
        jPanelProgressionLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelProgressionLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelProgression.setLayout(jPanelProgressionLayout);

        jTextFieldQStart.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQStart.setToolTipText("<html>\n<b>Initial Degree of Destruction</b>\n<br>Initial value of q (degree of destruction) at the beginning of the first ALNS segment.\n<br>q determines how many clusters are to be inserted by the destruction heuristics.\n<br>The value of q increases at the end of each segment by <tt>qDelta</tt>.");
        jTextFieldQStart.setPreferredSize(new java.awt.Dimension(45, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.qStart}"), jTextFieldQStart, org.jdesktop.beansbinding.BeanProperty.create("text"), "Initial q");
        binding.setConverter(integerConverter1);
        binding.setValidator(positiveIntegerValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldQStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelProgression.add(jTextFieldQStart, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Initial q");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelProgression.add(jLabel7, gridBagConstraints);

        jTextFieldQDelta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldQDelta.setToolTipText("<html>\n<b>Degree of Destruction increment</b>\n<br>Constant increment of q at the end of every segment.");
        jTextFieldQDelta.setPreferredSize(new java.awt.Dimension(45, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.qDelta}"), jTextFieldQDelta, org.jdesktop.beansbinding.BeanProperty.create("text"), "Delta q");
        binding.setConverter(integerConverter1);
        binding.setValidator(positiveIntegerValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldQDelta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelProgression.add(jTextFieldQDelta, gridBagConstraints);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Delta q");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelProgression.add(jLabel6, gridBagConstraints);

        jTextFieldSegmentSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldSegmentSize.setToolTipText("<html> \n<b>ALNS segment size</b>\n<br>Maximum number of iterations in an ALNS optimization segment.\n<br>Every iteration includes the application of a destroy heuristic over\n<br>the previous feasible solution, followed by the application of a\n<br>repair heuristic to bring the destroyed solution back to feasibility.\n<br>This parameter can be throttled by the \"Maximum iterations without\n<br>improvement in a segment\" parameter.");
        jTextFieldSegmentSize.setPreferredSize(new java.awt.Dimension(45, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.segmentSize}"), jTextFieldSegmentSize, org.jdesktop.beansbinding.BeanProperty.create("text"), "Max iterations per segment");
        binding.setConverter(integerConverter1);
        binding.setValidator(positiveIntegerValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldSegmentSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelProgression.add(jTextFieldSegmentSize, gridBagConstraints);
        jTextFieldSegmentSize.getAccessibleContext().setAccessibleDescription("<html>\nMaximum number of iterations in an ALNS optimization segment.\n<br>Every iteration includes the application of a destroy heuristic over\n<br>the previous feasible solution, followed by the application of a\n<br>repair heuristic to bring the destroyed solution back to feasibility.\n<br>This parameter can be throttled by the \"Maximum iterations without\n<br>improvement in a segment\" parameter.");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Max iterations per segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelProgression.add(jLabel5, gridBagConstraints);

        jTextFieldMaxIterationsWithoutImprovement.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxIterationsWithoutImprovement.setToolTipText("<html>\n<b>ALNS no-improvement throttle</b>\n<br>Maximum number of iterations without improvement in an ALNS optimization segment.\n<br>If this number of iterations without improvement is reached,\n<br>the ALNS solver will move on with the next segment (evenutally doing a little\n<br>local search in between the two segments).");
        jTextFieldMaxIterationsWithoutImprovement.setPreferredSize(new java.awt.Dimension(45, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.maxIterationsWithoutImprovement}"), jTextFieldMaxIterationsWithoutImprovement, org.jdesktop.beansbinding.BeanProperty.create("text"), "Max iterations w/o improvement in a segment");
        binding.setConverter(integerConverter1);
        binding.setValidator(positiveIntegerValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldMaxIterationsWithoutImprovement.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        jTextFieldMaxIterationsWithoutImprovement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMaxIterationsWithoutImprovementActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelProgression.add(jTextFieldMaxIterationsWithoutImprovement, gridBagConstraints);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Max iterations w/o improvement in a segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelProgression.add(jLabel15, gridBagConstraints);

        jTextFieldAlpha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldAlpha.setToolTipText("<html>\n<b>Simulated annealing decay</b>\n<br>This is the decay parameter of the update process for <tt>Temperature.</tt>\n<br>This value should be a real number in the interval [0,1].\n<br>The temperature is updated at the end of every segment like\n<br><tt>newTemperature</tt> = <tt>alpha</tt>*<tt>oldTemperature</tt>\n<br>A slowly decreasing temperature (<tt>alpha</tt>-&gt;1)\n<br>will make it more likely to accept worse solutions at the\n<br>beginning of a segment, but it might find a better solution.\n<br>However a slowly decreasing temperature will take longer to converge\n<br>to a better solution.\n<br>\n<br><b>NOTE:</b> to be changed in accordance with <tt>Segment Size</tt>");
        jTextFieldAlpha.setPreferredSize(new java.awt.Dimension(45, 24));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.alpha}"), jTextFieldAlpha, org.jdesktop.beansbinding.BeanProperty.create("text"), "Alpha");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldAlpha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelProgression.add(jTextFieldAlpha, gridBagConstraints);
        jTextFieldAlpha.getAccessibleContext().setAccessibleDescription("<html>\n<b>Simulated annealing</b>\n<br>This is the decay parameter of the update process for <tt>Temperature.</tt>\n<br>This value should be a double in the interval [0,1].\n<br>The temperature is updated at the end of every segment like\n<br><tt>newTemperature</tt> = <tt>alpha</tt>*<tt>oldTemperature</tt>\n<br>A slowly decreasing temperature (<tt>alpha</tt>-&gt;1)\n<br>will make it more likely to accept worse solutions at the\n<br>beginning, but it might find a better solution in a longer time.\n<br><b>NOTE:</b> to be changed in accordance with <tt>Segment Size</tt>");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Alpha (Simulated Annealing temp. decay)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelProgression.add(jLabel9, gridBagConstraints);

        jPanelALNSParameters.add(jPanelProgression);

        jPanelHeuristics.setBorder(javax.swing.BorderFactory.createTitledBorder("ALNS Heuristic methods"));
        java.awt.GridBagLayout jPanelHeuristicsLayout = new java.awt.GridBagLayout();
        jPanelHeuristicsLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelHeuristicsLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelHeuristics.setLayout(jPanelHeuristicsLayout);

        jLabel8.setText("Lambda (heuristic weight decay)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHeuristics.add(jLabel8, gridBagConstraints);

        jTextFieldLambda.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldLambda.setToolTipText("<html>\n<b>ALNS heuristic weight decay</b>\n<br>This is the decay parameter of the update process for heuristic method weights.\n<br>This value should be a floating point number (double) in the interval [0,1].\n<br>Heuristic method weights are updated at the end of every iteration\n<br>following the convex combination:\n<br> <tt>newWeight</tt> = <tt>lambda</tt>*<tt>oldWeight</tt> + (1-<tt>lambda</tt>)*<tt>psi</tt>\n<br>where <tt>psi</tt> is a value that indicates the relative score to give to an heuristic.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.lambda}"), jTextFieldLambda, org.jdesktop.beansbinding.BeanProperty.create("text"), "Lambda");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldLambda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelHeuristics.add(jTextFieldLambda, gridBagConstraints);

        jPanelRepairHeuristics.setBorder(javax.swing.BorderFactory.createTitledBorder("Repair Heuristics"));
        jPanelRepairHeuristics.setName(""); // NOI18N
        jPanelRepairHeuristics.setLayout(new java.awt.GridBagLayout());

        jCheckBoxRepairHighCostRemoval.setText("RepairHighCostRemoval");
        jCheckBoxRepairHighCostRemoval.setToolTipText("Removes the first q clusters with the highest cost from the current solution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useRepairHighCostRemoval}"), jCheckBoxRepairHighCostRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairHighCostRemoval");
        bindingGroup.addBinding(binding);

        jCheckBoxRepairHighCostRemoval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairHighCostRemoval, gridBagConstraints);

        jCheckBoxRepairRandomRemoval.setText("RepairRandomRemoval");
        jCheckBoxRepairRandomRemoval.setToolTipText("Removes at most q randomly picked clusters from the current solution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useRepairRandomRemoval}"), jCheckBoxRepairRandomRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairRandomRemoval");
        bindingGroup.addBinding(binding);

        jCheckBoxRepairRandomRemoval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairRandomRemoval, gridBagConstraints);

        jCheckBoxRepairTravelTime.setText("RepairTravelTime");
        jCheckBoxRepairTravelTime.setToolTipText("<html>\nRemoves the first cluster with the least profit/cost\n<br>ratio, then removes the other q-1 clusters which are the most similar to\n<br>the first one. The similarity criterion is computed as follows:\n<ul>\n<li> 1/3 * (distanceBetween(i,j) + distanceBetween(firstNode,j) + distanceBetween(j,lastNode))\n<li> i = first cluster removed from solution\n<li> j = cluster to evaluate for removal\n</ul>");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useRepairTravelTime}"), jCheckBoxRepairTravelTime, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairTravelTime");
        bindingGroup.addBinding(binding);

        jCheckBoxRepairTravelTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairTravelTime, gridBagConstraints);

        jCheckBoxRepairVehicleTime.setText("RepairVehicleTime");
        jCheckBoxRepairVehicleTime.setToolTipText("<html>\nRemoves the first cluster with the least profit/cost\n<br>ratio, then removes the other q-1 clusters which are the most similar to\n<br>the first one.\n<br>The similarity criterion is computed as follows:\n<br><ul>\n<li>Find v as the vehicle with the longest service time in the first cluster</li>\n<li>For every node n in the first cluster get the duration of services servable by v.\n<br>Sum all the values to get the total service time.</li>\n<li>Divide the previous value by the total duration of services in the clusters</li>\n<li>Take the absolute value of the difference between the ratio for the\n<br>first cluster removed and the ratio for every other cluster as the similarity criterion.</li>\n</ul>");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useRepairVehicleTime}"), jCheckBoxRepairVehicleTime, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairVehicleTime");
        bindingGroup.addBinding(binding);

        jCheckBoxRepairVehicleTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairVehicleTime, gridBagConstraints);

        jCheckBoxRepairWorstRemoval.setText("RepairWorstRemoval");
        jCheckBoxRepairWorstRemoval.setToolTipText("Removes the first q clusters with the least profit/cost ratio.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useRepairWorstRemoval}"), jCheckBoxRepairWorstRemoval, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useRepairWorstRemoval");
        bindingGroup.addBinding(binding);

        jCheckBoxRepairWorstRemoval.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelRepairHeuristics.add(jCheckBoxRepairWorstRemoval, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        jPanelHeuristics.add(jPanelRepairHeuristics, gridBagConstraints);

        jPanelDestroyHeuristics.setBorder(javax.swing.BorderFactory.createTitledBorder("Destroy Heuristics"));
        jPanelDestroyHeuristics.setLayout(new java.awt.GridBagLayout());

        jCheckBoxDestroyGreedyCostInsertion.setText("DestroyGreedyCostInsertion");
        jCheckBoxDestroyGreedyCostInsertion.setToolTipText("Inserts the q clusters with the least cost  into the current solution in a greedy way.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useDestroyGreedyCostInsertion}"), jCheckBoxDestroyGreedyCostInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyCostInsertion");
        bindingGroup.addBinding(binding);

        jCheckBoxDestroyGreedyCostInsertion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyCostInsertion, gridBagConstraints);

        jCheckBoxDestroyGreedyBestInsertion.setText("DestroyGreedyBestInsertion");
        jCheckBoxDestroyGreedyBestInsertion.setToolTipText("Inserts the q clusters with the highest profit to cost ratio into the current solution in a greedy way.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useDestroyGreedyBestInsertion}"), jCheckBoxDestroyGreedyBestInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyBestInsertion");
        bindingGroup.addBinding(binding);

        jCheckBoxDestroyGreedyBestInsertion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyBestInsertion, gridBagConstraints);

        jCheckBoxDestroyGreedyProfitInsertion.setText("DestroyGreedyProfitInsertion");
        jCheckBoxDestroyGreedyProfitInsertion.setToolTipText("Inserts the q clusters with the highest profit into the current solution in a greedy way.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useDestroyGreedyProfitInsertion}"), jCheckBoxDestroyGreedyProfitInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyGreedyProfitInsertion");
        bindingGroup.addBinding(binding);

        jCheckBoxDestroyGreedyProfitInsertion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyGreedyProfitInsertion, gridBagConstraints);

        jCheckBoxDestroyRandomInsertion.setText("DestroyRandomInsertion");
        jCheckBoxDestroyRandomInsertion.setToolTipText("Inserts q randomly picked clusters into the current solution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useDestroyRandomInsertion}"), jCheckBoxDestroyRandomInsertion, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyRandomInsertion");
        bindingGroup.addBinding(binding);

        jCheckBoxDestroyRandomInsertion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                updatePsiBeanC(evt);
            }
        });
        jCheckBoxDestroyRandomInsertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDestroyRandomInsertionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyRandomInsertion, gridBagConstraints);

        jCheckBoxDestroyCloseToBarycenter.setText("DestroyCloseToBarycenter");
        jCheckBoxDestroyCloseToBarycenter.setToolTipText("Inserts the first q available clusters which are the closest\n<br>to the barycenter of the current solution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.useDestroyCloseToBarycenter}"), jCheckBoxDestroyCloseToBarycenter, org.jdesktop.beansbinding.BeanProperty.create("selected"), "useDestroyCloseToBarycenter");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelDestroyHeuristics.add(jCheckBoxDestroyCloseToBarycenter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanelHeuristics.add(jPanelDestroyHeuristics, gridBagConstraints);

        jLabel16.setText("Heuristic scores (values for psi)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHeuristics.add(jLabel16, gridBagConstraints);

        jPanelPsi.setMinimumSize(new java.awt.Dimension(200, 24));
        jPanelPsi.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                updatePsiGui(evt);
            }
        });
        jPanelPsi.setLayout(new javax.swing.BoxLayout(jPanelPsi, javax.swing.BoxLayout.LINE_AXIS));

        jTextFieldPsi0.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi0.setToolTipText("<html>\n<b>ALNS h. score for new global optimum</b>\n<br><tt>w1</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be a new global optimum.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, psibeanAdapter1, org.jdesktop.beansbinding.ELProperty.create("${psi1}"), jTextFieldPsi0, org.jdesktop.beansbinding.BeanProperty.create("text"), "Psi - omega 1");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPsi0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi0FocusLost(evt);
            }
        });
        jTextFieldPsi0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi0ActionPerformed(evt);
            }
        });
        jPanelPsi.add(jTextFieldPsi0);

        jTextFieldPsi1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi1.setToolTipText("<html>\n<b>ALNS h. score for better solution</b>\n<br><tt>w2</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be better than the previous one.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, psibeanAdapter1, org.jdesktop.beansbinding.ELProperty.create("${psi2}"), jTextFieldPsi1, org.jdesktop.beansbinding.BeanProperty.create("text"), "Psi - omega 2");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPsi1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi1FocusLost(evt);
            }
        });
        jTextFieldPsi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi1ActionPerformed(evt);
            }
        });
        jPanelPsi.add(jTextFieldPsi1);

        jTextFieldPsi2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi2.setToolTipText("<html>\n<b>ALNS h. score for worse solution, but accepted</b>\n<br><tt>w3</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is worse than the previous one but is accepted anyway.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, psibeanAdapter1, org.jdesktop.beansbinding.ELProperty.create("${psi3}"), jTextFieldPsi2, org.jdesktop.beansbinding.BeanProperty.create("text"), "Psi - omega 3");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPsi2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi2FocusLost(evt);
            }
        });
        jTextFieldPsi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi2ActionPerformed(evt);
            }
        });
        jPanelPsi.add(jTextFieldPsi2);

        jTextFieldPsi3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPsi3.setToolTipText("<html>\n<b>ALNS h. score for solution rejected</b>\n<br><tt>w4</tt> is the new suggested score for the selected heuristics\n<br>if the new solution is found to be worse than the previous one and is rejected.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, psibeanAdapter1, org.jdesktop.beansbinding.ELProperty.create("${psi4}"), jTextFieldPsi3, org.jdesktop.beansbinding.BeanProperty.create("text"), "Psi - omega 4");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPsi3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPsi3FocusLost(evt);
            }
        });
        jTextFieldPsi3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPsi3ActionPerformed(evt);
            }
        });
        jPanelPsi.add(jTextFieldPsi3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jPanelPsi, gridBagConstraints);

        jTextFieldRewardForBestSegmentHeuristics.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldRewardForBestSegmentHeuristics.setToolTipText("<html>\n<b>ALNS reward for best h. in segment</b>\n<br>A scaling factor which is applied to the weight of the best heuristics of the previous segment,\n<br>at the beginning of the next segment.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.rewardForBestSegmentHeuristics}"), jTextFieldRewardForBestSegmentHeuristics, org.jdesktop.beansbinding.BeanProperty.create("text"), "Reward for best segment heuristics");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldRewardForBestSegmentHeuristics.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jTextFieldRewardForBestSegmentHeuristics, gridBagConstraints);

        jLabel12.setText("Reward for best heuristics in a segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHeuristics.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Punishment for worst heuristics in a segment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelHeuristics.add(jLabel13, gridBagConstraints);

        jTextFieldPunishmentForWorstSegmentHeuristics.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldPunishmentForWorstSegmentHeuristics.setToolTipText("<html>\n<b>ALNS punishment for h. in segment</b>\n<br>A scaling factor which is applied to the weight of the worst heuristics of the previous segment,\n<br>at the beginning of the next segment.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.punishmentForWorstSegmentHeuristics}"), jTextFieldPunishmentForWorstSegmentHeuristics, org.jdesktop.beansbinding.BeanProperty.create("text"), "Punishment for worst segment heuristics");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPunishmentForWorstSegmentHeuristics.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jTextFieldPunishmentForWorstSegmentHeuristics, gridBagConstraints);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("<html><i>Weights at the beginning of a new segment:</i>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jLabel27, gridBagConstraints);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("<html><i>Weight progression:</i>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jLabel33, gridBagConstraints);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("<html><i>Active heuristics:</i>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelHeuristics.add(jLabel34, gridBagConstraints);

        jPanelALNSParameters.add(jPanelHeuristics);

        jPanelClusterRoulette.setBorder(javax.swing.BorderFactory.createTitledBorder("Cluster Roulette (improve solution diversification)"));
        java.awt.GridBagLayout jPanelClusterRouletteLayout = new java.awt.GridBagLayout();
        jPanelClusterRouletteLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelClusterRouletteLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelClusterRoulette.setLayout(jPanelClusterRouletteLayout);

        jTextFieldPunishmentGamma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPunishmentGamma.setToolTipText("<html>\n<b>Cluster roulette</b>\n<br>This parameter is the new probability of being chosen for nerfed\n<br>clusters (clusters which haven't behaved well in the segment).\n<br>Must be a double in range [0,1].");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.punishmentGamma}"), jTextFieldPunishmentGamma, org.jdesktop.beansbinding.BeanProperty.create("text"), "Punshment Gamma");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldPunishmentGamma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelClusterRoulette.add(jTextFieldPunishmentGamma, gridBagConstraints);

        jLabel21.setText("<html>Punishment Gamma <br>( nerfed clusters probability in next segment)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelClusterRoulette.add(jLabel21, gridBagConstraints);

        jTextFieldCooldownGamma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCooldownGamma.setToolTipText("<html>\n<b>Cluster roulette</b>\n<br>This parameter is the scaling factor used in the cooldown process.\n<br>Must be a small double in range [0,1].\n<br><li>A hot (freshly selected) cluster will have a new probability of\nbeing chosen which is <i>cooldownGamma</i> times smaller</li>\n<br>Probability for hot clusters is downscaled like\n<br><li><i>newProbability</i> = (1 -\n<i>cooldownGamma</i>)*<i>oldProbability</i></li>");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.cooldownGamma}"), jTextFieldCooldownGamma, org.jdesktop.beansbinding.BeanProperty.create("text"), "Cooldown Gamma");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldCooldownGamma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelClusterRoulette.add(jTextFieldCooldownGamma, gridBagConstraints);

        jLabel22.setText("Cooldown Gamma");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelClusterRoulette.add(jLabel22, gridBagConstraints);

        jTextFieldWarmupGamma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldWarmupGamma.setToolTipText("<html>\n<b>Cluster roulette</b>\n<br>This parameter is the scaling factor used in the warmup process.\n<br>Must be a small double in range [0,1].\n<br><li>A cold (not freshly selected) cluster will have a new probability\nof being chosen which is <i>warmupGamma</i> times bigger</li>\n\n<br>Probability for cold clusters is upscaled like\n<br><li><i>newProbability</i> = (1 -\n<i>warmupGamma</i>)*<i>oldProbability</i>+<i>warmupGamma</i></li>");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.warmupGamma}"), jTextFieldWarmupGamma, org.jdesktop.beansbinding.BeanProperty.create("text"), "Warmup Gamma");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldWarmupGamma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelClusterRoulette.add(jTextFieldWarmupGamma, gridBagConstraints);

        jLabel23.setText("Warmup Gamma");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelClusterRoulette.add(jLabel23, gridBagConstraints);

        jTextFieldNerfBarrier.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldNerfBarrier.setToolTipText("<html>\n<b>Cooldown - Bad Cluster Nerfing at segment end</b>\n<br>Clusters that have had a \"chance of being chosen\" less than the average\nfor more than nerfBarrier% of the time in a segment will be surely\npunished to make them less available in the following segment.\n\n<br>This will also impact on the local search: clusters that have a\nprobability of selection below the average won't be included in those\navailable for the local search.\n\n<br>Must be a double in range [0,1].");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.nerfBarrier}"), jTextFieldNerfBarrier, org.jdesktop.beansbinding.BeanProperty.create("text"), "Nerf Barrier");
        binding.setConverter(doubleConverter1);
        binding.setValidator(probabilityValueValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldNerfBarrier.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNerfBarrierFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelClusterRoulette.add(jTextFieldNerfBarrier, gridBagConstraints);

        jLabel24.setText("Nerf Barrier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelClusterRoulette.add(jLabel24, gridBagConstraints);

        jPanelALNSParameters.add(jPanelClusterRoulette);

        jPanelFineTunings.setBorder(javax.swing.BorderFactory.createTitledBorder("Fine tunings (solver time waste prevention)"));
        java.awt.GridBagLayout jPanelFineTuningsLayout = new java.awt.GridBagLayout();
        jPanelFineTuningsLayout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        jPanelFineTuningsLayout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanelFineTunings.setLayout(jPanelFineTuningsLayout);

        jTextFieldMaxMIPSNodesForFeasibilityCheck.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxMIPSNodesForFeasibilityCheck.setToolTipText("<html>\n<b>Feasibility check cutoff</b>\n<br>Determines the maximum number of MIPS nodes to solve before\n<br>giving up on a feasibility test on a solution.\n<br>Should be set to a high amount (ideally more than 5000) to avoid\n<br>claiming that a feasible (but hard to prove) solution is infeasible.\n<br><b>Note:</b> hard-to-prove-as-feasible solutions will take advantage\n<br>of this possibility, but will take much longer to prove as feasible.\n<br>A lower amount will cutoff such hard-to-prove solutions (and save time).\n<br><b>When in doubt, leave at the default value.</b>");
        jTextFieldMaxMIPSNodesForFeasibilityCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.maxMIPSNodesForFeasibilityCheck}"), jTextFieldMaxMIPSNodesForFeasibilityCheck, org.jdesktop.beansbinding.BeanProperty.create("text"), "maxMIPSNodesForFeasibilityCheck");
        binding.setConverter(doubleConverter1);
        binding.setValidator(positiveDoubleValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldMaxMIPSNodesForFeasibilityCheck.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelFineTunings.add(jTextFieldMaxMIPSNodesForFeasibilityCheck, gridBagConstraints);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Max MIPS nodes to solve in feasibility check");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelFineTunings.add(jLabel14, gridBagConstraints);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Secondary Termination criteria:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelFineTunings.add(jLabel18, gridBagConstraints);

        jTextFieldMaxSegments.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxSegments.setToolTipText("<html>\nMaximum number of segments for an ALNS run.\n<br>When this number of segments is reached, the ALNS solver\n<br>terminates its execution.\n<br>This value is throttled by the \"Max segments without improvement\"\n<br>parameter.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.maxSegments}"), jTextFieldMaxSegments, org.jdesktop.beansbinding.BeanProperty.create("text"), "Max segments for an ALNS run");
        binding.setConverter(longConverter1);
        binding.setValidator(positiveLongValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldMaxSegments.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelFineTunings.add(jTextFieldMaxSegments, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Max segments for an ALNS run");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelFineTunings.add(jLabel2, gridBagConstraints);

        jTextFieldMaxSegmentsWithoutImprovement.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldMaxSegmentsWithoutImprovement.setToolTipText("<html>\nMaximum number of segments without improvement for an ALNS run.\n<br>When this number of segments without improvement is reached,\n<br>the ALNS solver terminates its execution.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${ALNSproperties.maxSegmentsWithoutImprovement}"), jTextFieldMaxSegmentsWithoutImprovement, org.jdesktop.beansbinding.BeanProperty.create("text"), "Max segments without improvement");
        binding.setConverter(longConverter1);
        binding.setValidator(positiveLongValidator1);
        bindingGroup.addBinding(binding);

        jTextFieldMaxSegmentsWithoutImprovement.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        jTextFieldMaxSegmentsWithoutImprovement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMaxSegmentsWithoutImprovementActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanelFineTunings.add(jTextFieldMaxSegmentsWithoutImprovement, gridBagConstraints);

        jLabel19.setText("Max segments without improvement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelFineTunings.add(jLabel19, gridBagConstraints);

        jPanelALNSParameters.add(jPanelFineTunings);

        jScrollPaneALNS.setViewportView(jPanelALNSParameters);

        jPanelALNS.add(jScrollPaneALNS, java.awt.BorderLayout.CENTER);

        jPanelALNSActions.setMinimumSize(new java.awt.Dimension(600, 80));

        jButtonRunALNS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        jButtonRunALNS.setText("Solve with ALNS (heuristic)");
        buttonGroupActions.add(jButtonRunALNS);
        jButtonRunALNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunALNSActionPerformed(evt);
            }
        });
        jPanelALNSActions.add(jButtonRunALNS);

        jButtonLoadParametersALNS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-in-app.png"))); // NOI18N
        jButtonLoadParametersALNS.setText("Load parameters");
        jButtonLoadParametersALNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadParametersALNSActionPerformed(evt);
            }
        });
        jPanelALNSActions.add(jButtonLoadParametersALNS);

        jButtonSaveParametersALNS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/content-save.png"))); // NOI18N
        jButtonSaveParametersALNS.setText("Save parameters");
        jButtonSaveParametersALNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveParametersALNSActionPerformed(evt);
            }
        });
        jPanelALNSActions.add(jButtonSaveParametersALNS);

        jButtonResetParametersALNS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/replay.png"))); // NOI18N
        jButtonResetParametersALNS.setText("Reset parameters");
        jButtonResetParametersALNS.setToolTipText("Resets all parameters to safe defaults");
        jButtonResetParametersALNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetParametersALNSActionPerformed(evt);
            }
        });
        jPanelALNSActions.add(jButtonResetParametersALNS);

        jPanelALNS.add(jPanelALNSActions, java.awt.BorderLayout.PAGE_START);

        jTabbedPaneSolvers.addTab("ALNS", jPanelALNS);

        jPanelRelaxed.setLayout(new java.awt.BorderLayout());

        jPanelRelaxedActions.setMinimumSize(new java.awt.Dimension(600, 80));

        jButtonRunRelaxed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        jButtonRunRelaxed.setText("Solve relaxed model");
        buttonGroupActions.add(jButtonRunRelaxed);
        jButtonRunRelaxed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunRelaxedActionPerformed(evt);
            }
        });
        jPanelRelaxedActions.add(jButtonRunRelaxed);

        jPanelRelaxed.add(jPanelRelaxedActions, java.awt.BorderLayout.PAGE_START);

        jScrollPaneRelaxParam.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        jPanelRelaxedParameters.setLayout(new java.awt.GridBagLayout());

        jButtonOutputFolderPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-open.png"))); // NOI18N
        jButtonOutputFolderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputFolderPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanelRelaxedParameters.add(jButtonOutputFolderPath, gridBagConstraints);

        jTextFieldOutputFolderPath.setToolTipText("Choose the output directory");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.outputFolderPath}"), jTextFieldOutputFolderPath, org.jdesktop.beansbinding.BeanProperty.create("text"), "outputFolderPath");
        bindingGroup.addBinding(binding);

        jTextFieldOutputFolderPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                updatePsiBean(evt);
            }
        });
        jTextFieldOutputFolderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutputFolderPathActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 84;
        jPanelRelaxedParameters.add(jTextFieldOutputFolderPath, gridBagConstraints);

        jLabelOutputFolderPath.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelOutputFolderPath.setText("Output folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        jPanelRelaxedParameters.add(jLabelOutputFolderPath, gridBagConstraints);

        jCheckBoxForceHeuristicConstraints2.setText("Use heuristic constraints");
        jCheckBoxForceHeuristicConstraints2.setToolTipText("<html>If checked, heuristic constraints will always be used every time the MIPS solver is run.\n<br>These constraints clean up the model to speed up the search and to tighten the relaxed solution.\n<br><b>Warning:</b> forcing these constraints on might turn a feasible model into an infeasible one.\n<br>Turn this option off if the log says the model is infeasible!");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, parametersBean, org.jdesktop.beansbinding.ELProperty.create("${orienteeringProperties.forceHeuristicConstraints}"), jCheckBoxForceHeuristicConstraints2, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBoxForceHeuristicConstraints2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxForceHeuristicConstraints2updatePsiBeanC(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelRelaxedParameters.add(jCheckBoxForceHeuristicConstraints2, gridBagConstraints);

        jScrollPaneRelaxParam.setViewportView(jPanelRelaxedParameters);

        jPanelRelaxed.add(jScrollPaneRelaxParam, java.awt.BorderLayout.CENTER);

        jTabbedPaneSolvers.addTab("Relaxed", jPanelRelaxed);

        jPanelSolversEnvelope.add(jTabbedPaneSolvers);
        jTabbedPaneSolvers.getAccessibleContext().setAccessibleName("MIPS");
        jTabbedPaneSolvers.getAccessibleContext().setAccessibleDescription("MIPS Solver panel");

        jSplitPane1.setRightComponent(jPanelSolversEnvelope);

        jPanelControls.add(jSplitPane1);

        jSplitPane2.setLeftComponent(jPanelControls);

        jPanelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        jPanelOutput.setPreferredSize(new java.awt.Dimension(750, 280));
        jPanelOutput.setLayout(new java.awt.BorderLayout());

        jTabbedPaneOutputs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPaneOutputs.setMinimumSize(new java.awt.Dimension(122, 200));
        jTabbedPaneOutputs.setPreferredSize(new java.awt.Dimension(128, 200));

        jPanelConsoleOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelConsoleOutput.setLayout(new javax.swing.BoxLayout(jPanelConsoleOutput, javax.swing.BoxLayout.PAGE_AXIS));

        jScrollPaneTextAreaOutput.setBackground(new java.awt.Color(0, 51, 102));
        jScrollPaneTextAreaOutput.setAutoscrolls(true);

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setBackground(new java.awt.Color(0, 0, 102));
        jTextAreaOutput.setColumns(15);
        jTextAreaOutput.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaOutput.setForeground(new java.awt.Color(255, 255, 0));
        jTextAreaOutput.setRows(4);
        jTextAreaOutput.setTabSize(4);
        jTextAreaOutput.setToolTipText(null);
        jTextAreaOutput.setAutoscrolls(false);
        jTextAreaOutput.setMargin(new java.awt.Insets(5, 7, 5, 7));
        jTextAreaOutput.setSelectedTextColor(new java.awt.Color(255, 255, 153));
        jTextAreaOutput.setSelectionColor(new java.awt.Color(102, 0, 102));
        jScrollPaneTextAreaOutput.setViewportView(jTextAreaOutput);

        jPanelConsoleOutput.add(jScrollPaneTextAreaOutput);

        jPanelStopClear.setLayout(new javax.swing.BoxLayout(jPanelStopClear, javax.swing.BoxLayout.LINE_AXIS));

        jButtonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        jButtonStop.setText("Stop");
        jButtonStop.setToolTipText("Stop the batch execution");
        jButtonStop.setEnabled(false);
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        jPanelStopClear.add(jButtonStop);

        jButtonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eraser.png"))); // NOI18N
        jButtonReset.setText("Clear console");
        jButtonReset.setToolTipText("Clear console ouput and reset status");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        jPanelStopClear.add(jButtonReset);

        jButtonCloseAllReports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notification-clear-all.png"))); // NOI18N
        jButtonCloseAllReports.setText("Close all reports");
        jButtonCloseAllReports.setToolTipText("Close all solution reports");
        jButtonCloseAllReports.setEnabled(false);
        jButtonCloseAllReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseAllReportsActionPerformed(evt);
            }
        });
        jPanelStopClear.add(jButtonCloseAllReports);

        jButtonOpenOutputFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-open.png"))); // NOI18N
        jButtonOpenOutputFolder.setText("Output folder");
        jButtonOpenOutputFolder.setToolTipText("Open the current output folder in the File Manager");
        jButtonOpenOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenOutputFolderActionPerformed(evt);
            }
        });
        jPanelStopClear.add(jButtonOpenOutputFolder);

        jPanelConsoleOutput.add(jPanelStopClear);

        jTabbedPaneOutputs.addTab("Console", new javax.swing.ImageIcon(getClass().getResource("/images/console.png")), jPanelConsoleOutput); // NOI18N

        jPanelOutput.add(jTabbedPaneOutputs, java.awt.BorderLayout.CENTER);

        jPanelStatusBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        jPanelStatusBar.setForeground(java.awt.SystemColor.windowText);
        jPanelStatusBar.setMinimumSize(new java.awt.Dimension(515, 60));
        jPanelStatusBar.setLayout(new java.awt.BorderLayout());

        jPanelSBTop.setLayout(new javax.swing.BoxLayout(jPanelSBTop, javax.swing.BoxLayout.LINE_AXIS));

        jLabelStatus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelStatus.setText("Ready.");
        jLabelStatus.setToolTipText(jLabelStatus.getText());
        jPanelSBTop.add(jLabelStatus);

        jPanelStatusBar.add(jPanelSBTop, java.awt.BorderLayout.PAGE_START);

        jPanelSBBottom.setLayout(new java.awt.GridLayout(1, 0));

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel30.setText("Solver:  ");
        jPanelSBBottom.add(jLabel30);

        jLabelSelectedSolver.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelSelectedSolver.setText("No solver selected");
        jPanelSBBottom.add(jLabelSelectedSolver);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("Best objective:  ");
        jPanelSBBottom.add(jLabel25);

        jLabelBestObj.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelBestObj.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelBestObj.setText("0.0");
        jPanelSBBottom.add(jLabelBestObj);

        jProgressBar1.setBorder(null);
        jProgressBar1.setStringPainted(true);
        jPanelSBBottom.add(jProgressBar1);

        jPanelStatusBar.add(jPanelSBBottom, java.awt.BorderLayout.PAGE_END);

        jPanelOutput.add(jPanelStatusBar, java.awt.BorderLayout.PAGE_END);

        jSplitPane2.setRightComponent(jPanelOutput);

        jPanelMain.add(jSplitPane2);

        getContentPane().add(jPanelMain);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:
        jDialogConfirmStop.setLocationRelativeTo(jPanelOutput);
        jDialogConfirmStop.setVisible(true);
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // Ask for confirmation
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(
                null,
                "<html>Are you sure?"
                        + "<br>The console will be cleared!"
                        + "<br>Execution logs will still be available in the output folder.",
                "Warning",
                dialogButton
        );
        
        if(dialogResult == JOptionPane.YES_OPTION){
            // Cleanup the output area
            jTextAreaOutput.setText("");

            // Reset the progress bar
            jProgressBar1.setIndeterminate(false);
            jProgressBar1.setString(null);
            jProgressBar1.setValue(0);

            jLabelBestObj.setText("0.0");

            // Update the status text
            updateStatusLabel("Ready.");
        }
        
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Execution paused");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonTestBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestBeanActionPerformed
        jTextAreaOutput.append("Current properties bean:\n");
        jTextAreaOutput.append(parametersBean.toJSON());
    }//GEN-LAST:event_jButtonTestBeanActionPerformed

    /**
     * Launch the selected solver with the provided instances
     * @param solver 
     */
    private void runWithSolver(Controller.Solvers solver){
        // Display the currently selected solver in the GUI
        jLabelSelectedSolver.setText(solver.toString());

        // Retrieve all instances to run
        List<String> modelPaths = new ArrayList<>();
        for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
            modelPaths.add(jListInstances.getModel().getElementAt(i));
        }

        if (!modelPaths.isEmpty()) {
            // Disable all control windows
            this.enableControlPanel(false);
            
            // Update the status bar
            updateStatusLabel("Running.");
            jProgressBar1.setIndeterminate(false);
            jProgressBar1.setString(null);
            jProgressBar1.setValue(0);

            // Setup a new instance of controller
            controllerTask = new Controller(modelPaths,
                parametersBean.getOrienteeringProperties(),
                parametersBean.getALNSproperties(),
                solver,
                textAreaOutputStream,
                this
            );
            controllerTask.execute();
        } else {
            updateStatusLabel("No instances to solve! Ready.");
        }
    }
    
    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        // TODO add your handling code here:
        System.out.println("Who are you running from? Don't be silly!\n");

        // Retrieve all instances to run
        List<String> modelPaths = new ArrayList<>();
        for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
            modelPaths.add(jListInstances.getModel().getElementAt(i));
        }

        if (!modelPaths.isEmpty()) {
            // Disable all control windows
            this.enableControlPanel(false);

            // Retrieve information on which solver to use
            Controller.Solvers solver = Controller.Solvers.SOLVE_RELAXED;
            if (jRadioButtonALNS.isSelected()) {
                solver = Controller.Solvers.SOLVE_ALNS;
            } else if (jRadioButtonMIPS.isSelected()) {
                solver = Controller.Solvers.SOLVE_MIPS;
            } else if (jRadioButtonRelaxed.isSelected()) {
                solver = Controller.Solvers.SOLVE_RELAXED;
            }
            // Update the status bar
            updateStatusLabel("Running.");
            jProgressBar1.setIndeterminate(false);
            jProgressBar1.setString(null);
            jProgressBar1.setValue(0);

            // Setup a new instance of controller
            controllerTask = new Controller(modelPaths,
                parametersBean.getOrienteeringProperties(),
                parametersBean.getALNSproperties(),
                solver,
                textAreaOutputStream,
                this
            );
            controllerTask.execute();
        } else {
            updateStatusLabel("No instances to solve! Ready.");
        }
    }//GEN-LAST:event_jButtonRunActionPerformed

    private void loadParameters(){
        jFileChooserLoadParameters.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());

        int result = jFileChooserLoadParameters.showOpenDialog(jPanelSolversEnvelope);
        File inputFile = jFileChooserLoadParameters.getSelectedFile();
        if (inputFile != null && result == JFileChooser.APPROVE_OPTION) {
            try {
                this.parametersBean.deserializeFromJSON(inputFile.getAbsolutePath());
                this.errorBindingListener.resetAllErrors();
                System.out.println("Parameters loaded from '"+inputFile.getAbsolutePath()+"'");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        jPanelMain,
                        "<html>The provided parameters file isn't valid.<br>"
                                + "Reason: <br>"
                                + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );                
            }
            updateWorkingDirectory(inputFile.toPath().getParent().toFile());
        }
    }
    
    private void jButtonLoadParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadParametersActionPerformed
        loadParameters();
    }//GEN-LAST:event_jButtonLoadParametersActionPerformed

    private void saveParameters(){
        jFileChooserSaveParameters.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());
        
        int result = jFileChooserSaveParameters.showOpenDialog(jPanelSolversEnvelope);
        File outputFilePath = jFileChooserSaveParameters.getSelectedFile();
        if (outputFilePath != null && result == JFileChooser.APPROVE_OPTION) {
            try {
                this.parametersBean.serializeToJSON(outputFilePath.getAbsolutePath());
            } catch (IOException ex) {
                System.out.println("Can't save to '"+outputFilePath.getAbsolutePath()+"': "+ex.getMessage());
            }
            System.out.println("Parameters saved to '"+outputFilePath.getAbsolutePath()+"'");
            updateWorkingDirectory(outputFilePath.toPath().getParent().toFile());
        }
    }
    
    private void jButtonSaveParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveParametersActionPerformed
        saveParameters();
    }//GEN-LAST:event_jButtonSaveParametersActionPerformed

    private void jTextFieldNerfBarrierFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNerfBarrierFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextFieldNerfBarrierFocusLost

    private void updatePsiBean(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_updatePsiBean

    }//GEN-LAST:event_updatePsiBean

    private void jCheckBoxDestroyRandomInsertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDestroyRandomInsertionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxDestroyRandomInsertionActionPerformed

    private void updatePsiBeanC(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_updatePsiBeanC
        // TODO add your handling code here:
    }//GEN-LAST:event_updatePsiBeanC

    private void updatePsiGui(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_updatePsiGui
        // TODO add your handling code here:
        updatePsiGui();
    }//GEN-LAST:event_updatePsiGui

    private void jTextFieldPsi3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi3ActionPerformed
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi3ActionPerformed

    private void jTextFieldPsi3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi3FocusLost
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi3FocusLost

    private void jTextFieldPsi2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi2ActionPerformed
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi2ActionPerformed

    private void jTextFieldPsi2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi2FocusLost
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi2FocusLost

    private void jTextFieldPsi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi1ActionPerformed
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi1ActionPerformed

    private void jTextFieldPsi1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi1FocusLost
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi1FocusLost

    private void jTextFieldPsi0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPsi0ActionPerformed
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi0ActionPerformed

    private void jTextFieldPsi0FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPsi0FocusLost
        // TODO add your handling code here:
//        updatePsiBean();
    }//GEN-LAST:event_jTextFieldPsi0FocusLost

    private void jButtonOutputFolderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputFolderPathActionPerformed
        jFileChooserOutputFolderPath.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());
        int result = jFileChooserOutputFolderPath.showOpenDialog(jPanelSolversEnvelope);
        File outputFolderPath = jFileChooserOutputFolderPath.getSelectedFile();
        if (outputFolderPath != null && result == JFileChooser.APPROVE_OPTION) {
            jTextFieldOutputFolderPath.setText(outputFolderPath.getAbsolutePath());
            this.parametersBean.getOrienteeringProperties().setOutputFolderPath(outputFolderPath.getAbsolutePath());
            updateWorkingDirectory(outputFolderPath);
        }
    }//GEN-LAST:event_jButtonOutputFolderPathActionPerformed

    private void jTextFieldOutputFolderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPathActionPerformed

    private void jRadioButtonRelaxedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRelaxedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonRelaxedActionPerformed

    private void jTextFieldTimeLimit1updatePsiBean(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTimeLimit1updatePsiBean
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimeLimit1updatePsiBean

    private void jTextFieldTimeLimit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTimeLimit1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTimeLimit1ActionPerformed

    private void jTextFieldOutputFolderPath1updatePsiBean(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPath1updatePsiBean
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPath1updatePsiBean

    private void jTextFieldOutputFolderPath1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPath1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPath1ActionPerformed

    private void jCheckBoxForceHeuristicConstraints1updatePsiBeanC(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxForceHeuristicConstraints1updatePsiBeanC
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxForceHeuristicConstraints1updatePsiBeanC

    private void jButtonOutputFolderPath1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputFolderPath1ActionPerformed
        // TODO add your handling code here:
        jFileChooserOutputFolderPath.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());
        int result = jFileChooserOutputFolderPath.showOpenDialog(jPanelSolversEnvelope);
        File outputFolderPath = jFileChooserOutputFolderPath.getSelectedFile();
        if (outputFolderPath != null && result == JFileChooser.APPROVE_OPTION) {
            jTextFieldOutputFolderPath.setText(outputFolderPath.getAbsolutePath());
            this.parametersBean.getOrienteeringProperties().setOutputFolderPath(outputFolderPath.getAbsolutePath());
            updateWorkingDirectory(outputFolderPath);
        }
    }//GEN-LAST:event_jButtonOutputFolderPath1ActionPerformed

    private void jButtonErrorOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonErrorOkActionPerformed
        // TODO add your handling code here:
        jDialogError.setVisible(false);
    }//GEN-LAST:event_jButtonErrorOkActionPerformed

    private void jButtonRunALNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunALNSActionPerformed
        // TODO add your handling code here:
        if(validateFields()){
            runWithSolver(Controller.Solvers.SOLVE_ALNS);
        }
    }//GEN-LAST:event_jButtonRunALNSActionPerformed

    /**
     * Validate all the text fields involved in the binding group of this
     * window.
     * @return <code>true</code> if all fields are valid, <code>false</code> otherwise
     */
    public boolean validateFields(){
        boolean ret = false;
        
        for(Binding b: bindingGroup.getBindings()){
            Object source = b.getTargetObject();
            Validator validator = b.getValidator();
            Converter converter = b.getConverter();
            
            // Validate all JTextField bindings
            if(source != null && validator != null && converter != null){
                if(source instanceof JTextField){
                    JTextField jtf = (JTextField) source;
                    try{
                        Result r = validator.validate(
                                converter.convertReverse((jtf.getText()))
                        );
                        if(r != null){ //Validation error
                            String msg = "[" + b.getName() + "] " + r.getDescription();
                            jtf.requestFocusInWindow();
                            jtf.setBackground(Color.PINK);
                            JOptionPane.showMessageDialog(null, msg, "Input error", JOptionPane.ERROR_MESSAGE);
                            System.out.println(msg);
                            ret = false;
                            break;
                        }
                        else ret = true;
                    }
                    catch(Exception e){ //Conversion error
                        String msg = "[" + b.getName() + "] " + "The inserted string is not a number. "+e.getMessage();
                        jtf.requestFocusInWindow();
                        jtf.setBackground(Color.PINK);
                        JOptionPane.showMessageDialog(null, msg, "Input error", JOptionPane.ERROR_MESSAGE);
                        System.out.println(msg);
                        ret = false;
                        break;
                    }
                    
                }
            }       
        }
        
        boolean jcbValidRepair = false;
        boolean jcbValidDestroy = false;
        
        // Validate all Repair Heuristics (at least one of them must be selected)
        if(ret){
            for(Component c : jPanelRepairHeuristics.getComponents()){
                if(c instanceof JCheckBox){
                    jcbValidRepair |= ((JCheckBox) c).isSelected();
                }
            }
            if(!jcbValidRepair){
                String msgR = "You must select at least an ALNS repair heuristic!";
                jPanelHeuristics.requestFocusInWindow();
                JOptionPane.showMessageDialog(null, msgR, "Input error", JOptionPane.ERROR_MESSAGE);
            }
        }
        ret &= jcbValidRepair;
        
        
        // Validate all Destroy Heuristics (at least one of them must be selected)
        if(ret){
            for(Component c : jPanelDestroyHeuristics.getComponents()){
                if(c instanceof JCheckBox){
                    jcbValidDestroy |= ((JCheckBox) c).isSelected();
                }
            }
            if(!jcbValidDestroy){
                String msg = "You must select at least an ALNS destroy heuristic!";
                jPanelHeuristics.requestFocusInWindow();
                JOptionPane.showMessageDialog(null, msg, "Input error", JOptionPane.ERROR_MESSAGE);
            }
        }
        ret &= jcbValidDestroy;
        
        return ret;
    }
    
    private void jTextFieldOutputFolderPath2updatePsiBean(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPath2updatePsiBean
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPath2updatePsiBean

    private void jTextFieldOutputFolderPath2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutputFolderPath2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFolderPath2ActionPerformed

    private void jButtonOutputFolderPath2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputFolderPath2ActionPerformed
        // TODO add your handling code here:
        jFileChooserOutputFolderPath.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());
        int result = jFileChooserOutputFolderPath.showOpenDialog(jPanelSolversEnvelope);
        File outputFolderPath = jFileChooserOutputFolderPath.getSelectedFile();
        if (outputFolderPath != null && result == JFileChooser.APPROVE_OPTION) {
            jTextFieldOutputFolderPath.setText(outputFolderPath.getAbsolutePath());
            this.parametersBean.getOrienteeringProperties().setOutputFolderPath(outputFolderPath.getAbsolutePath());
            updateWorkingDirectory(outputFolderPath);
        }
    }//GEN-LAST:event_jButtonOutputFolderPath2ActionPerformed

    private void jButtonRunMIPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunMIPSActionPerformed
        // TODO add your handling code here:
        if(validateFields()){
            runWithSolver(Controller.Solvers.SOLVE_MIPS);
        }
    }//GEN-LAST:event_jButtonRunMIPSActionPerformed

    private void jButtonRunRelaxedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunRelaxedActionPerformed
        // TODO add your handling code here:
        if(validateFields()){
            runWithSolver(Controller.Solvers.SOLVE_RELAXED);
        }
    }//GEN-LAST:event_jButtonRunRelaxedActionPerformed

    private void btnMoveInstanceDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstanceDownActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toMoveDn = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            if (toMoveDn < jListInstances.getModel().getSize() - 1) {
                for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                    if (i == toMoveDn) {
                        String temp = jListInstances.getModel().getElementAt(i);
                        dlm.addElement(jListInstances.getModel().getElementAt(i + 1));
                        dlm.addElement(temp);
                        i++;
                    } else {
                        dlm.addElement(jListInstances.getModel().getElementAt(i));
                    }
                }
                jListInstances.setModel(dlm);
                jListInstances.setSelectedIndex(Math.min(toMoveDn + 1, dlm.size() - 1));
            }
        }
    }//GEN-LAST:event_btnMoveInstanceDownActionPerformed

    private void btnMoveInstanceUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveInstanceUpActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toMoveUp = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                if (i == toMoveUp - 1) {
                    String temp = jListInstances.getModel().getElementAt(i);
                    dlm.addElement(jListInstances.getModel().getElementAt(i + 1));
                    dlm.addElement(temp);
                    i++;
                } else {
                    dlm.addElement(jListInstances.getModel().getElementAt(i));
                }
            }
            jListInstances.setModel(dlm);
            jListInstances.setSelectedIndex(Math.max(toMoveUp - 1, 0));
        }
    }//GEN-LAST:event_btnMoveInstanceUpActionPerformed

    private void btnRemoveInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveInstanceActionPerformed
        // TODO add your handling code here:
        if (!jListInstances.isSelectionEmpty()) {
            int toRemove = jListInstances.getSelectedIndex();
            DefaultListModel dlm = new DefaultListModel();
            for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                if (i != toRemove) {
                    dlm.addElement(jListInstances.getModel().getElementAt(i));
                }
            }
            jListInstances.setModel(dlm);
            jListInstances.setSelectedIndex(toRemove);
        }
    }//GEN-LAST:event_btnRemoveInstanceActionPerformed

    private void btnAddInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInstanceActionPerformed
        // Update working directory
        jFileChooserInstances.setCurrentDirectory(pathCacheBean.getPathToLastDirectory());
        
        // Ask the user to choose a file
        int result = jFileChooserInstances.showOpenDialog(jPanelMain);
        if(JFileChooser.APPROVE_OPTION == result){
            // Copy the old instances list
            DefaultListModel dlm = new DefaultListModel();
            for (int i = 0; i < jListInstances.getModel().getSize(); i++) {
                dlm.addElement(jListInstances.getModel().getElementAt(i));
            }
            
            // Gather all the selected instance files, test them against the
            // model, if they're correct add them to the batch,
            // otherwise show an error dialog
            File[] selected = jFileChooserInstances.getSelectedFiles();
            for (File f : selected) {
                String path = f.getAbsolutePath();
                try {
                    solverModel.InstanceCTOPWSSReader.read(path);
                    dlm.addElement(path);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                        jPanelMain,
                        "<html>The provided instance file isn't valid."
                                + "<br>Path: "+path
                                + "<br>Reason: <i><br>"
                                + ex.getMessage() + "</i>",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            } // for-each

            jListInstances.setModel(dlm);
        }

        if(jFileChooserInstances.getSelectedFiles().length != 0){
            updateWorkingDirectory(jFileChooserInstances.getSelectedFiles()[0].toPath().getParent().toFile());
        }
    }//GEN-LAST:event_btnAddInstanceActionPerformed

    private void jButtonSaveParametersMIPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveParametersMIPSActionPerformed
        // TODO add your handling code here:
        if(validateFields()){
            saveParameters();
        }
    }//GEN-LAST:event_jButtonSaveParametersMIPSActionPerformed

    private void jButtonSaveParametersALNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveParametersALNSActionPerformed
        // TODO add your handling code here:
        if(validateFields()){
            saveParameters();
        }
    }//GEN-LAST:event_jButtonSaveParametersALNSActionPerformed

    private void jButtonLoadParametersALNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadParametersALNSActionPerformed
        // TODO add your handling code here:
        loadParameters();
    }//GEN-LAST:event_jButtonLoadParametersALNSActionPerformed

    private void jButtonLoadParametersMIPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadParametersMIPSActionPerformed
        // TODO add your handling code here:
        loadParameters();
    }//GEN-LAST:event_jButtonLoadParametersMIPSActionPerformed

    private void jButtonYesStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonYesStopActionPerformed
        // TODO add your handling code here:
        // Kill the controller thread and triggers the garbage collector
        if (controllerTask != null) {
            controllerTask.cancel(true);
            System.gc();
        }
        
        enableControlPanel(true);

        // Update the status text
        updateStatusLabel("Stopped.");
        
        // Close the modal dialog
        jDialogConfirmStop.setVisible(false);
    }//GEN-LAST:event_jButtonYesStopActionPerformed

    private void jButtonNoStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNoStopActionPerformed
        // TODO add your handling code here:
        jDialogConfirmStop.setVisible(false);
    }//GEN-LAST:event_jButtonNoStopActionPerformed

    private void jButtonCloseAllReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseAllReportsActionPerformed
        // TODO add your handling code here:
        
        // Ask for confirmation
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(
                null,
                "Are you sure? All open report tabs will be closed!",
                "Warning",
                dialogButton
        );
        
        if(dialogResult == JOptionPane.YES_OPTION){
            this.removeAllSolutionReports();
        }
    }//GEN-LAST:event_jButtonCloseAllReportsActionPerformed

    private void jButtonOpenOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenOutputFolderActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Desktop d = Desktop.getDesktop();
            d.open(new File(this.parametersBean.getOrienteeringProperties().getOutputFolderPath()));
        } catch (IOException ex) {
            Logger.getLogger(SolutionReportPane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonOpenOutputFolderActionPerformed

    private void jCheckBoxForceHeuristicConstraints2updatePsiBeanC(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxForceHeuristicConstraints2updatePsiBeanC
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxForceHeuristicConstraints2updatePsiBeanC

    private void jTextFieldMaxIterationsWithoutImprovementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMaxIterationsWithoutImprovementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMaxIterationsWithoutImprovementActionPerformed

    private void jTextFieldMaxSegmentsWithoutImprovementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMaxSegmentsWithoutImprovementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMaxSegmentsWithoutImprovementActionPerformed

    private void jSliderThreadsALNSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderThreadsALNSStateChanged
        // TODO add your handling code here:
        if(jSliderThreadsALNS.getValue() == 0){
            jLabelThreadsALNS.setText(
                    "<html>default: number of cores\n" +
                    "<br><i>Avoid if CPU has hyperthreading</i>"
            );
        }
        else jLabelThreadsALNS.setText(""+jSliderThreadsALNS.getValue());
    }//GEN-LAST:event_jSliderThreadsALNSStateChanged

    private void jSliderThreadsMIPSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderThreadsMIPSStateChanged
        // TODO add your handling code here:
        if(jSliderThreadsMIPS.getValue() == 0){
            jLabelThreadsMIPS.setText(
                    "<html>default: number of cores\n" +
                    "<br><i>Avoid if your CPU has hyperthreading</i>"
            );
        }
        else jLabelThreadsMIPS.setText(""+jSliderThreadsALNS.getValue());
    }//GEN-LAST:event_jSliderThreadsMIPSStateChanged

    private void jButtonResetParametersALNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetParametersALNSActionPerformed
        // TODO add your handling code here:
        this.parametersBean.restoreDefaults();
        this.errorBindingListener.resetAllErrors();
        //updateAllJTextFieldsFromBindings();
    }//GEN-LAST:event_jButtonResetParametersALNSActionPerformed
    
    /**
     * Restore the value of all JTextFields from their bound object
     */
    public void updateAllJTextFieldsFromBindings(){
        for(Binding b : this.bindingGroup.getBindings()){
            if(b.getTargetObject() instanceof JTextField){
                // get the textfield
                JTextField jtf = (JTextField) b.getTargetObject();
                
                // reset the text to the safe stored value
                jtf.setText(b.getSourceValueForTarget().getValue().toString());
            }
        }
    }
    
    /**
     * Load parameters from a given PropertiesBean
     * @param pb the PropertiesBean to load parameters from
     */
    public void loadParametersBean(ParametersBean pb){
        this.parametersBean.getALNSproperties().cloneFrom(pb.getALNSproperties());
        this.parametersBean.getOrienteeringProperties().cloneFrom(pb.getOrienteeringProperties());
        this.errorBindingListener.resetAllErrors();
    }
    
    /**
     * Update the cached path to the working directory to the specified one, if
     * it isn't null. 
     * @param newWorkingDirectory path to the new working directory
     */
    private void updateWorkingDirectory(File newWorkingDirectory){
        if(newWorkingDirectory != null){
            pathCacheBean.setPathToLastDirectory(newWorkingDirectory);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mw = new MainWindow();
                // Set the title
                mw.setTitle("CTOWSS ALNS v"+SOFTWARE_VERSION+" (GUI mode)");

                // Make the window appear
                mw.setVisible(true);

                // Make tooltips appear faster and last longer
                ToolTipManager.sharedInstance().setInitialDelay(250);
                ToolTipManager.sharedInstance().setDismissDelay(15000);
            }
        });
    }
    
    /**
     * Adds a solution report tab to the output pane.
     * @param solution the new solution to represent.
     */
    public void addSolutionReport(Solution solution){
        if(solution != null){
            // Increment the reportNumber
            this.lastSolutionReportNumber++;
            
            // Create a new solution pane
            SolutionReportPane newPane = new SolutionReportPane(
                    solution,
                    parametersBean.getOrienteeringProperties().getOutputFolderPath(),
                    lastSolutionReportNumber,
                    this
            );
            
            // Remember the reference to this pane
            solutionReports.add(newPane);
            
            // Add the solution pane to the report panes
            jTabbedPaneOutputs.addTab(
                    "Report "+lastSolutionReportNumber,
                    new javax.swing.ImageIcon(getClass().getResource("/images/clipboard-text.png")),
                    newPane
            ); // NOI18N
            
            // Enable the button to close all solution reports
            jButtonCloseAllReports.setEnabled(true);
        }
    }
    
    /**
     * Remove the solution report specified
     * @param solutionReport the solution report to remove
     */
    public void removeSolutionReport(SolutionReportPane solutionReport){
        if(solutionReport != null){
            jTabbedPaneOutputs.remove(solutionReport);
            solutionReports.remove(solutionReport);
        }
        
        // Disable the button to close all solution reports if there are no more
        // reports
        if(solutionReports.isEmpty()){
            jButtonCloseAllReports.setEnabled(false);
        }
    }
    
    /**
     * Remove all the open solution report tabs
     */
    public void removeAllSolutionReports(){
        for(SolutionReportPane s:this.solutionReports){
            jTabbedPaneOutputs.remove(s);
        }
        solutionReports.clear();
        
        // Disable the button to close all solution reports
        jButtonCloseAllReports.setEnabled(false);
    }
    
    /**
     * Updates the status bar (label+progress bar).
     * @param osm the optimization status message to display.
     */
    public void updateSolverStatusIndicators(
            OptimizationStatusMessage osm
    ){  
        if(osm != null){
            this.jLabelBestObj.setText(String.valueOf(osm.getBestObj()));
            
            // Record how much time is left for processing the current instance
            long timeLeft = (long) osm.getTimelimit()- (long) osm.getElapsedTime();
            long minutesLeft = TimeUnit.SECONDS.toMinutes(timeLeft);
            
            switch(osm.getStatus()){
                case STARTING:
                    this.updateSolverStatusTemporary("Starting to solve instance '"+osm.getInstancePath()
                            +"', batch status: "+osm.getInstanceNumber()+"/"+osm.getBatchSize()
                            +" completed."
                            +" Please wait...");
                    break;
                    
                case RUNNING:
                    this.jProgressBar1.setIndeterminate(false);
                    this.jLabelStatus.setText("Working. Solving instance '"+osm.getInstancePath()
                            +"', batch status: "+osm.getInstanceNumber()+"/"+osm.getBatchSize()+" completed.");
                    this.jProgressBar1.setValue(osm.getProgress());
                    
                    
                    // Set the progress bar text according to the selected solver
                    if(this.controllerTask.getSolver() == Controller.Solvers.SOLVE_RELAXED){
                        this.jProgressBar1.setString("Instance "
                                + (osm.getInstanceNumber()+1)
                                + "/"
                                + osm.getBatchSize()
                        );
                    }
                    else {
                        this.jProgressBar1.setString(osm.getProgress()+"%, "
                                +minutesLeft+" minutes left");
                    }
                    break;
                    
                case STOPPING:
                    this.updateSolverStatusTemporary("Stopping. Please wait...");
                    break;
                    
                case STOPPED:
                    this.jProgressBar1.setIndeterminate(false);
                    this.jLabelStatus.setText("Stopped while solving instance '"+osm.getInstancePath()
                            +"', batch status: "+osm.getInstanceNumber()+"/"+osm.getBatchSize()+" completed. Ready.");
                    this.jProgressBar1.setValue(osm.getProgress());
                    this.jProgressBar1.setString(osm.getProgress()+"%, "+"stopped");
                    
                    // Eventually add the solution report
                    if(controllerTask != null){
                        this.addSolutionReport(controllerTask.getLatestBestSolution());
                        controllerTask = null;
                    }
                    
                    // Re-enable the control panel
                    this.enableControlPanel(true);
                    break;
                    
                case DONE:
                    if(osm.getInstanceNumber()<osm.getBatchSize()) {
                        // We are not done with the whole batch yet

                        // Update the temporary status label
                        updateSolverStatusTemporary(
                                "Instance '"+osm.getInstancePath()+"' ("
                                +osm.getInstanceNumber()+"/"+osm.getBatchSize()
                                +") done! Loading the next instance..."
                        );
                    }
                    else {
                        // The batch has ended
                        
                        this.jProgressBar1.setIndeterminate(false);
                        // Update the status label
                        updateStatusLabel("Done! Ready.");

                        // Update the progress bar
                        this.jProgressBar1.setString(null);
                        this.jProgressBar1.setValue(100);

                        // Re-enable the control panel
                        this.enableControlPanel(true);
                    }
                    
                    // In any case, add the solution report
                    this.addSolutionReport(controllerTask.getLatestBestSolution());
                    
                    break;
            }
        }
        else this.updateSolverStatusTemporary("Please wait...");
        
        jLabelStatus.setToolTipText(jLabelStatus.getText());
    }
    
    /**
     * Sets the progress bar in an indeterminate state and publishes a message
     * in the status bar.
     * @param message message to display in the status bar while the progress
     * bar is indeterminate
     */
    public void updateSolverStatusTemporary(String message){
        this.jLabelStatus.setText(message);
        this.jProgressBar1.setIndeterminate(true);
    }
    
    /**
     * Enables or disables the control panel in this GUI
     * @param enabled flag to be set
     */
    private void enableControlPanel(boolean enabled){
        if(enabled){
            // Enable all control windows
            enableComponents(jPanelControls, true);
            // Disable the stop button
            jButtonStop.setEnabled(false);
            // Enable the reset and save output buttons
            jButtonReset.setEnabled(true);
            //jButtonSaveOutput.setEnabled(true);
        }
        else {
            // Disable all control windows
            enableComponents(jPanelControls, false);
            // Enable the stop button
            jButtonStop.setEnabled(true);
            // Disable the reset and save output buttons
            jButtonReset.setEnabled(false);
            //jButtonSaveOutput.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public void openWindow(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        this.setTitle("CTOWSS ALNS v"+SOFTWARE_VERSION+" (GUI mode)");
        this.setVisible(true);
        ToolTipManager.sharedInstance().setInitialDelay(250);
        ToolTipManager.sharedInstance().setDismissDelay(15000);
    }

    /**
     * Sets the "enabled" flag of every component in the specified container
     *
     * @param container the parent container to start setting the enabled flag
     * from
     * @param enable the enable flag to set
     */
    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }

    /**
     * Updates all values of psi in the GUI
     */
    private void updatePsiGui() {
        jTextFieldPsi0.setText(parametersBean.getALNSproperties().getHeuristicScores()[0] + "");
        jTextFieldPsi1.setText(parametersBean.getALNSproperties().getHeuristicScores()[1] + "");
        jTextFieldPsi2.setText(parametersBean.getALNSproperties().getHeuristicScores()[2] + "");
        jTextFieldPsi3.setText(parametersBean.getALNSproperties().getHeuristicScores()[3] + "");
        jTextFieldPsi0.updateUI();
        jTextFieldPsi1.updateUI();
        jTextFieldPsi2.updateUI();
        jTextFieldPsi3.updateUI();
    }

    /**
     * This method updates jTextAreaOutput with the output from the optimization
     * algorithms
     *
     * @param text the text to put in jTextAreaOutput
     */
    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                jTextAreaOutput.append(text);
            }
        });
    }

    // These two allow me to get the outputstream and give it to other classes
    private OutputStream textAreaOutputStream;

    public OutputStream getTextAreaOutputStream() {
        return textAreaOutputStream;
    }

    /**
     * Redirects System Streams to jTextAreaOutput
     */
    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddInstance;
    private javax.swing.JButton btnMoveInstanceDown;
    private javax.swing.JButton btnMoveInstanceUp;
    private javax.swing.JButton btnRemoveInstance;
    private javax.swing.ButtonGroup buttonGroupActions;
    private javax.swing.ButtonGroup buttonGroupInstance;
    private javax.swing.ButtonGroup buttonGroupSolver;
    private solverView.bindingInterfaces.DoubleConverter doubleConverter1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private solverView.bindingInterfaces.IntegerConverter integerConverter1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCloseAllReports;
    private javax.swing.JButton jButtonErrorOk;
    private javax.swing.JButton jButtonLoadParameters;
    private javax.swing.JButton jButtonLoadParametersALNS;
    private javax.swing.JButton jButtonLoadParametersMIPS;
    private javax.swing.JButton jButtonNoStop;
    private javax.swing.JButton jButtonOpenOutputFolder;
    private javax.swing.JButton jButtonOutputFolderPath;
    private javax.swing.JButton jButtonOutputFolderPath1;
    private javax.swing.JButton jButtonOutputFolderPath2;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonResetParametersALNS;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JButton jButtonRunALNS;
    private javax.swing.JButton jButtonRunMIPS;
    private javax.swing.JButton jButtonRunRelaxed;
    private javax.swing.JButton jButtonSaveParameters;
    private javax.swing.JButton jButtonSaveParametersALNS;
    private javax.swing.JButton jButtonSaveParametersMIPS;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JButton jButtonTestBean;
    private javax.swing.JButton jButtonYesStop;
    private javax.swing.JCheckBox jCheckBoxDestroyCloseToBarycenter;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyBestInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyCostInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyGreedyProfitInsertion;
    private javax.swing.JCheckBox jCheckBoxDestroyRandomInsertion;
    private javax.swing.JCheckBox jCheckBoxForceHeuristicConstraints1;
    private javax.swing.JCheckBox jCheckBoxForceHeuristicConstraints2;
    private javax.swing.JCheckBox jCheckBoxRepairHighCostRemoval;
    private javax.swing.JCheckBox jCheckBoxRepairRandomRemoval;
    private javax.swing.JCheckBox jCheckBoxRepairTravelTime;
    private javax.swing.JCheckBox jCheckBoxRepairVehicleTime;
    private javax.swing.JCheckBox jCheckBoxRepairWorstRemoval;
    private javax.swing.JDialog jDialogConfirmStop;
    private javax.swing.JDialog jDialogDeprecatedOptions;
    private javax.swing.JDialog jDialogError;
    private javax.swing.JFileChooser jFileChooserInstances;
    private javax.swing.JFileChooser jFileChooserLoadParameters;
    private javax.swing.JFileChooser jFileChooserOutputFolderPath;
    private javax.swing.JFileChooser jFileChooserSaveOutput;
    private javax.swing.JFileChooser jFileChooserSaveParameters;
    private javax.swing.JFileChooser jFileChooserWorkingDirectory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBestObj;
    private javax.swing.JLabel jLabelErrorIcon;
    private javax.swing.JLabel jLabelErrorMessage;
    private javax.swing.JLabel jLabelOutputFolderPath;
    private javax.swing.JLabel jLabelOutputFolderPath1;
    private javax.swing.JLabel jLabelOutputFolderPath2;
    private javax.swing.JLabel jLabelSelectedSolver;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelThreadsALNS;
    private javax.swing.JLabel jLabelThreadsMIPS;
    private javax.swing.JList<String> jListInstances;
    private javax.swing.JPanel jPaneMIPS;
    private javax.swing.JPanel jPaneMIPSActions;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelALNS;
    private javax.swing.JPanel jPanelALNSActions;
    private javax.swing.JPanel jPanelALNSGeneralParams;
    private javax.swing.JPanel jPanelALNSParameters;
    private javax.swing.JPanel jPanelActions;
    private javax.swing.JPanel jPanelClusterRoulette;
    private javax.swing.JPanel jPanelConsoleOutput;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelDestroyHeuristics;
    private javax.swing.JPanel jPanelFineTunings;
    private javax.swing.JPanel jPanelHeuristics;
    private javax.swing.JPanel jPanelInstancesButtons;
    private javax.swing.JPanel jPanelMIPSParameters;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JPanel jPanelProgression;
    private javax.swing.JPanel jPanelPsi;
    private javax.swing.JPanel jPanelRelaxed;
    private javax.swing.JPanel jPanelRelaxedActions;
    private javax.swing.JPanel jPanelRelaxedParameters;
    private javax.swing.JPanel jPanelRepairHeuristics;
    private javax.swing.JPanel jPanelSBBottom;
    private javax.swing.JPanel jPanelSBTop;
    private javax.swing.JPanel jPanelSolver;
    private javax.swing.JPanel jPanelSolversEnvelope;
    private javax.swing.JPanel jPanelStatusBar;
    private javax.swing.JPanel jPanelStopClear;
    private javax.swing.JPanel jPanelnstances;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonALNS;
    private javax.swing.JRadioButton jRadioButtonMIPS;
    private javax.swing.JRadioButton jRadioButtonRelaxed;
    private javax.swing.JScrollPane jScrollPaneALNS;
    private javax.swing.JScrollPane jScrollPaneInstances;
    private javax.swing.JScrollPane jScrollPaneMIPS;
    private javax.swing.JScrollPane jScrollPaneRelaxParam;
    private javax.swing.JScrollPane jScrollPaneTextAreaOutput;
    private javax.swing.JSlider jSliderThreadsALNS;
    private javax.swing.JSlider jSliderThreadsMIPS;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPaneOutputs;
    private javax.swing.JTabbedPane jTabbedPaneSolvers;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextFieldAlpha;
    private javax.swing.JTextField jTextFieldCooldownGamma;
    private javax.swing.JTextField jTextFieldLambda;
    private javax.swing.JTextField jTextFieldMaxIterationsWithoutImprovement;
    private javax.swing.JTextField jTextFieldMaxMIPSNodesForFeasibilityCheck;
    private javax.swing.JTextField jTextFieldMaxSegments;
    private javax.swing.JTextField jTextFieldMaxSegmentsWithoutImprovement;
    private javax.swing.JTextField jTextFieldNerfBarrier;
    private javax.swing.JTextField jTextFieldOutputFolderPath;
    private javax.swing.JTextField jTextFieldOutputFolderPath1;
    private javax.swing.JTextField jTextFieldOutputFolderPath2;
    private javax.swing.JTextField jTextFieldPsi0;
    private javax.swing.JTextField jTextFieldPsi1;
    private javax.swing.JTextField jTextFieldPsi2;
    private javax.swing.JTextField jTextFieldPsi3;
    private javax.swing.JTextField jTextFieldPunishmentForWorstSegmentHeuristics;
    private javax.swing.JTextField jTextFieldPunishmentGamma;
    private javax.swing.JTextField jTextFieldQDelta;
    private javax.swing.JTextField jTextFieldQStart;
    private javax.swing.JTextField jTextFieldRewardForBestSegmentHeuristics;
    private javax.swing.JTextField jTextFieldSegmentSize;
    private javax.swing.JTextField jTextFieldTimeLimit1;
    private javax.swing.JTextField jTextFieldTimeLimitALNS;
    private javax.swing.JTextField jTextFieldTimeLimitLocalSearch;
    private javax.swing.JTextField jTextFieldWarmupGamma;
    private solverView.bindingInterfaces.LongConverter longConverter1;
    private solverController.ParametersBean parametersBean;
    private solverView.PathCacheBean pathCacheBean;
    private solverView.bindingInterfaces.PositiveDoubleValidator positiveDoubleValidator1;
    private solverView.bindingInterfaces.PositiveIntegerValidator positiveIntegerValidator1;
    private solverView.bindingInterfaces.PositiveLongValidator positiveLongValidator1;
    private solverView.bindingInterfaces.PositiveOrZeroIntegerValidator positiveOrZeroIntegerValidator1;
    private solverView.bindingInterfaces.ProbabilityValueValidator probabilityValueValidator1;
    private solverView.bindingInterfaces.PsibeanAdapter psibeanAdapter1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the text in the status bar.
     *
     * @param statusText
     */
    private void updateStatusLabel(String statusText) {
        jLabelStatus.setText(statusText);
        jLabelStatus.updateUI();
    }
}
